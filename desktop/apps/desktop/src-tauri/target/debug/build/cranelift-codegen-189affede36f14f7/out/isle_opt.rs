// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_opt.isle
// - src/opts/arithmetic.isle
// - src/opts/bitops.isle
// - src/opts/cprop.isle
// - src/opts/extends.isle
// - src/opts/icmp.isle
// - src/opts/remat.isle
// - src/opts/selects.isle
// - src/opts/shifts.isle
// - src/opts/vector.isle
// - /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_etor_returns) -> ();
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 331.
    return v5;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src/prelude_opt.isle line 20.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 21.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 22.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 23.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 24.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 25.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 26.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 27.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 28.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 29.
    return v4;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v897 =
                                                            constructor_smin(ctx, v831, v36, v38);
                                                        let v898 =
                                                            constructor_splat(ctx, v2.0, v897);
                                                        // Rule at src/opts/vector.isle line 54.
                                                        returns.extend(Some(v898));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v899 =
                                                            constructor_umin(ctx, v831, v36, v38);
                                                        let v900 =
                                                            constructor_splat(ctx, v2.0, v899);
                                                        // Rule at src/opts/vector.isle line 57.
                                                        returns.extend(Some(v900));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v901 =
                                                            constructor_smax(ctx, v831, v36, v38);
                                                        let v902 =
                                                            constructor_splat(ctx, v2.0, v901);
                                                        // Rule at src/opts/vector.isle line 60.
                                                        returns.extend(Some(v902));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v903 =
                                                            constructor_umax(ctx, v831, v36, v38);
                                                        let v904 =
                                                            constructor_splat(ctx, v2.0, v903);
                                                        // Rule at src/opts/vector.isle line 63.
                                                        returns.extend(Some(v904));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iadd = v111 {
                                        if v2.0 == v11.0 {
                                            let v113 = C::unpack_value_array_2(ctx, v112);
                                            let mut v116 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v113.1, &mut v116);
                                            let mut v116 = v116.into_context_iter();
                                            while let Some(v117) = v116.next(ctx) {
                                                match &v117.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v120,
                                                        args: ref v121,
                                                    } => {
                                                        if let &Opcode::Iadd = v120 {
                                                            if v2.0 == v117.0 {
                                                                let v125 = constructor_iadd(
                                                                    ctx, v2.0, v7.0, v113.0,
                                                                );
                                                                let v122 = C::unpack_value_array_2(
                                                                    ctx, v121,
                                                                );
                                                                let v126 = constructor_iadd(
                                                                    ctx, v2.0, v122.0, v122.1,
                                                                );
                                                                let v127 = constructor_iadd(
                                                                    ctx, v2.0, v125, v126,
                                                                );
                                                                let v128 = C::subsume(ctx, v127);
                                                                // Rule at src/opts/arithmetic.isle line 134.
                                                                returns.extend(Some(v128));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v631,
                                                        imm: v632,
                                                    } => {
                                                        if let &Opcode::Iconst = v631 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v129,
                                                                    args: ref v130,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Iadd = v129 {
                                                                        if v2.0 == v19.0 {
                                                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                                                            let mut v182 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v131.1,
                                                                                &mut v182,
                                                                            );
                                                                            let mut v182 = v182
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v183) =
                                                                                v182.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v186,
                                                                                    imm: v187,
                                                                                } = &v183.1 {
                                                                                    if let &Opcode::Iconst = v186 {
                                                                                        let v633 = constructor_iadd(ctx, v2.0, v131.0, v113.0);
                                                                                        let v634 = constructor_iadd(ctx, v2.0, v131.1, v113.1);
                                                                                        let v635 = constructor_iadd(ctx, v2.0, v633, v634);
                                                                                        // Rule at src/opts/cprop.isle line 218.
                                                                                        returns.extend(Some(v635));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v35,
                                                        arg: v36,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v35 {
                                                            if v2.0 == v19.0 {
                                                                let v831 = C::lane_type(ctx, v2.0);
                                                                let v881 = constructor_iadd(
                                                                    ctx, v831, v36, v38,
                                                                );
                                                                let v882 = constructor_splat(
                                                                    ctx, v2.0, v881,
                                                                );
                                                                // Rule at src/opts/vector.isle line 30.
                                                                returns.extend(Some(v882));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            let v24 = C::u64_from_imm64(ctx, v23);
                                                            if v24 == 0x1 {
                                                                if v2.0 == v19.0 {
                                                                    let v55 = constructor_ineg(
                                                                        ctx, v2.0, v38,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 61.
                                                                    returns.extend(Some(v55));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v129,
                                                        args: ref v130,
                                                    } => {
                                                        match v129 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v19.0 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                if v2.0 == v183.0 {
                                                                                    let v564 = constructor_iadd(ctx, v2.0, v131.1, v7.1);
                                                                                    let v565 = constructor_iadd(ctx, v2.0, v131.0, v564);
                                                                                    // Rule at src/opts/cprop.isle line 125.
                                                                                    returns.extend(Some(v565));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v19.0 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v134 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.0, &mut v134,
                                                                    );
                                                                    let mut v134 =
                                                                        v134.into_context_iter();
                                                                    while let Some(v135) =
                                                                        v134.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v570,
                                                                            imm: v571,
                                                                        } = &v135.1 {
                                                                            if let &Opcode::Iconst = v570 {
                                                                                if v2.0 == v135.0 {
                                                                                    let v572 = C::u64_from_imm64(ctx, v571);
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v582 = C::u64_add(ctx, v572, v16);
                                                                                    let v583 = C::imm64_masked(ctx, v2.0, v582);
                                                                                    let v584 = constructor_iconst(ctx, v2.0, v583);
                                                                                    let v585 = constructor_isub(ctx, v2.0, v584, v131.1);
                                                                                    // Rule at src/opts/cprop.isle line 151.
                                                                                    returns.extend(Some(v585));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                if v2.0 == v183.0 {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v188 = C::u64_from_imm64(ctx, v187);
                                                                                    let v577 = C::u64_sub(ctx, v16, v188);
                                                                                    let v578 = C::imm64_masked(ctx, v2.0, v577);
                                                                                    let v579 = constructor_iconst(ctx, v2.0, v578);
                                                                                    let v581 = constructor_iadd(ctx, v2.0, v131.0, v579);
                                                                                    // Rule at src/opts/cprop.isle line 147.
                                                                                    returns.extend(Some(v581));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v35,
                                                        arg: v36,
                                                    } => {
                                                        if let &Opcode::Bnot = v35 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                if v2.0 == v19.0 {
                                                                    let v54 = constructor_ineg(
                                                                        ctx, v2.0, v36,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 59.
                                                                    returns.extend(Some(v54));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v11.0 == v44 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v482 =
                                                                    C::u64_add(ctx, v24, v16);
                                                                let v483 =
                                                                    C::imm64_masked(ctx, v44, v482);
                                                                let v484 = constructor_iconst(
                                                                    ctx, v44, v483,
                                                                );
                                                                let v485 = C::subsume(ctx, v484);
                                                                // Rule at src/opts/cprop.isle line 3.
                                                                returns.extend(Some(v485));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 6.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Iadd = v129 {
                                        if v2.0 == v19.0 {
                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                            let mut v134 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v131.0, &mut v134);
                                            let mut v134 = v134.into_context_iter();
                                            while let Some(v135) = v134.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v138,
                                                    args: ref v139,
                                                } = &v135.1
                                                {
                                                    if let &Opcode::Iadd = v138 {
                                                        if v2.0 == v135.0 {
                                                            let v140 =
                                                                C::unpack_value_array_2(ctx, v139);
                                                            let v143 = constructor_iadd(
                                                                ctx, v2.0, v140.0, v140.1,
                                                            );
                                                            let v144 = constructor_iadd(
                                                                ctx, v2.0, v131.1, v7.1,
                                                            );
                                                            let v145 = constructor_iadd(
                                                                ctx, v2.0, v143, v144,
                                                            );
                                                            let v146 = C::subsume(ctx, v145);
                                                            // Rule at src/opts/arithmetic.isle line 136.
                                                            returns.extend(Some(v146));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v555 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 94.
                                            returns.extend(Some(v555));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 4.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    match v129 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            if v2.0 == v183.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                let v577 = C::u64_sub(ctx, v16, v188);
                                                                                let v578 = C::imm64_masked(ctx, v2.0, v577);
                                                                                let v579 = constructor_iconst(ctx, v2.0, v578);
                                                                                let v580 = constructor_isub(ctx, v2.0, v131.0, v579);
                                                                                // Rule at src/opts/cprop.isle line 143.
                                                                                returns.extend(Some(v580));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.0, &mut v134,
                                                                );
                                                                let mut v134 =
                                                                    v134.into_context_iter();
                                                                while let Some(v135) =
                                                                    v134.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v570,
                                                                        imm: v571,
                                                                    } = &v135.1 {
                                                                        if let &Opcode::Iconst = v570 {
                                                                            if v2.0 == v135.0 {
                                                                                let v572 = C::u64_from_imm64(ctx, v571);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v573 = C::u64_sub(ctx, v572, v16);
                                                                                let v574 = C::imm64_masked(ctx, v2.0, v573);
                                                                                let v575 = constructor_iconst(ctx, v2.0, v574);
                                                                                let v576 = constructor_isub(ctx, v2.0, v575, v131.1);
                                                                                // Rule at src/opts/cprop.isle line 139.
                                                                                returns.extend(Some(v576));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            if v2.0 == v183.0 {
                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v566 = C::u64_add(ctx, v188, v16);
                                                                                let v567 = C::imm64_masked(ctx, v2.0, v566);
                                                                                let v568 = constructor_iconst(ctx, v2.0, v567);
                                                                                let v569 = constructor_isub(ctx, v2.0, v131.0, v568);
                                                                                // Rule at src/opts/cprop.isle line 135.
                                                                                returns.extend(Some(v569));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    match v35 {
                                        &Opcode::Splat => {
                                            if v2.0 == v19.0 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v37,
                                                        arg: v38,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Splat = v37 {
                                                            if v2.0 == v11.0 {
                                                                let v831 = C::lane_type(ctx, v2.0);
                                                                let v883 = constructor_isub(
                                                                    ctx, v831, v36, v38,
                                                                );
                                                                let v884 = constructor_splat(
                                                                    ctx, v2.0, v883,
                                                                );
                                                                // Rule at src/opts/vector.isle line 33.
                                                                returns.extend(Some(v884));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v19.0 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            let v52 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v15,
                                                            );
                                                            if v52 == -0x1 {
                                                                if v2.0 == v11.0 {
                                                                    let v54 = constructor_ineg(
                                                                        ctx, v2.0, v36,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 63.
                                                                    returns.extend(Some(v54));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v25 = constructor_ineg(ctx, v2.0, v7.1);
                                                // Rule at src/opts/arithmetic.isle line 18.
                                                returns.extend(Some(v25));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v556 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                            let v557 = constructor_ineg(ctx, v2.0, v556);
                                            // Rule at src/opts/cprop.isle line 99.
                                            returns.extend(Some(v557));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v19.0 == v44 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v486 =
                                                                    C::u64_sub(ctx, v24, v16);
                                                                let v487 =
                                                                    C::imm64_masked(ctx, v44, v486);
                                                                let v488 = constructor_iconst(
                                                                    ctx, v44, v487,
                                                                );
                                                                let v489 = C::subsume(ctx, v488);
                                                                // Rule at src/opts/cprop.isle line 9.
                                                                returns.extend(Some(v489));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 8.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x0 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 13.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v739 = C::remat(ctx, arg0);
                                    // Rule at src/opts/remat.isle line 10.
                                    returns.extend(Some(v739));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        if v7.0 == v7.1 {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v48 = C::imm64(ctx, 0x0);
                                    let v49 = constructor_iconst(ctx, v46, v48);
                                    let v50 = C::subsume(ctx, v49);
                                    // Rule at src/opts/arithmetic.isle line 39.
                                    returns.extend(Some(v50));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Imul = v111 {
                                        if v2.0 == v11.0 {
                                            let v113 = C::unpack_value_array_2(ctx, v112);
                                            let mut v116 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v113.1, &mut v116);
                                            let mut v116 = v116.into_context_iter();
                                            while let Some(v117) = v116.next(ctx) {
                                                match &v117.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v120,
                                                        args: ref v121,
                                                    } => {
                                                        if let &Opcode::Imul = v120 {
                                                            if v2.0 == v117.0 {
                                                                let v147 = constructor_imul(
                                                                    ctx, v2.0, v7.0, v113.0,
                                                                );
                                                                let v122 = C::unpack_value_array_2(
                                                                    ctx, v121,
                                                                );
                                                                let v148 = constructor_imul(
                                                                    ctx, v2.0, v122.0, v122.1,
                                                                );
                                                                let v149 = constructor_imul(
                                                                    ctx, v2.0, v147, v148,
                                                                );
                                                                let v150 = C::subsume(ctx, v149);
                                                                // Rule at src/opts/arithmetic.isle line 139.
                                                                returns.extend(Some(v150));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v631,
                                                        imm: v632,
                                                    } => {
                                                        if let &Opcode::Iconst = v631 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v129,
                                                                    args: ref v130,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Imul = v129 {
                                                                        if v2.0 == v19.0 {
                                                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                                                            let mut v182 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v131.1,
                                                                                &mut v182,
                                                                            );
                                                                            let mut v182 = v182
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v183) =
                                                                                v182.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v186,
                                                                                    imm: v187,
                                                                                } = &v183.1 {
                                                                                    if let &Opcode::Iconst = v186 {
                                                                                        let v636 = constructor_imul(ctx, v2.0, v131.0, v113.0);
                                                                                        let v637 = constructor_imul(ctx, v2.0, v131.1, v113.1);
                                                                                        let v638 = constructor_imul(ctx, v2.0, v636, v637);
                                                                                        // Rule at src/opts/cprop.isle line 222.
                                                                                        returns.extend(Some(v638));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v35,
                                                        arg: v36,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v35 {
                                                            if v2.0 == v19.0 {
                                                                let v831 = C::lane_type(ctx, v2.0);
                                                                let v885 = constructor_imul(
                                                                    ctx, v831, v36, v38,
                                                                );
                                                                let v886 = constructor_splat(
                                                                    ctx, v2.0, v885,
                                                                );
                                                                // Rule at src/opts/vector.isle line 36.
                                                                returns.extend(Some(v886));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v35,
                                                        arg: v36,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Ineg = v35 {
                                                            if v2.0 == v19.0 {
                                                                let v39 = constructor_imul(
                                                                    ctx, v2.0, v36, v38,
                                                                );
                                                                let v40 = C::subsume(ctx, v39);
                                                                // Rule at src/opts/arithmetic.isle line 27.
                                                                returns.extend(Some(v40));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            match v16 {
                                                0x0 => {
                                                    let v51 = C::subsume(ctx, v7.1);
                                                    // Rule at src/opts/arithmetic.isle line 48.
                                                    returns.extend(Some(v51));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                0x1 => {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src/opts/arithmetic.isle line 42.
                                                    returns.extend(Some(v17));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                            if v52 == -0x1 {
                                                let v53 = constructor_ineg(ctx, v2.0, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 54.
                                                returns.extend(Some(v53));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v129,
                                                    args: ref v130,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Imul = v129 {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let mut v182 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v131.1, &mut v182,
                                                            );
                                                            let mut v182 = v182.into_context_iter();
                                                            while let Some(v183) = v182.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v186,
                                                                    imm: v187,
                                                                } = &v183.1 {
                                                                    if let &Opcode::Iconst = v186 {
                                                                        if v2.0 == v183.0 {
                                                                            let v586 = constructor_imul(ctx, v2.0, v131.1, v7.1);
                                                                            let v587 = constructor_imul(ctx, v2.0, v131.0, v586);
                                                                            // Rule at src/opts/cprop.isle line 156.
                                                                            returns.extend(Some(v587));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v11.0 == v44 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v490 =
                                                                    C::u64_mul(ctx, v24, v16);
                                                                let v491 =
                                                                    C::imm64_masked(ctx, v44, v490);
                                                                let v492 = constructor_iconst(
                                                                    ctx, v44, v491,
                                                                );
                                                                let v493 = C::subsume(ctx, v492);
                                                                // Rule at src/opts/cprop.isle line 15.
                                                                returns.extend(Some(v493));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v78 = C::simm32(ctx, v15);
                                        if let Some(v79) = v78 {
                                            if v79 == 0x2 {
                                                let v80 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 91.
                                                returns.extend(Some(v80));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v81 = C::imm64_power_of_two(ctx, v15);
                                        if let Some(v82) = v81 {
                                            let v83 = C::imm64(ctx, v82);
                                            let v84 = constructor_iconst(ctx, v2.0, v83);
                                            let v85 = constructor_ishl(ctx, v2.0, v7.0, v84);
                                            // Rule at src/opts/arithmetic.isle line 98.
                                            returns.extend(Some(v85));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Imul = v129 {
                                        if v2.0 == v19.0 {
                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                            let mut v134 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v131.0, &mut v134);
                                            let mut v134 = v134.into_context_iter();
                                            while let Some(v135) = v134.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v138,
                                                    args: ref v139,
                                                } = &v135.1
                                                {
                                                    if let &Opcode::Imul = v138 {
                                                        if v2.0 == v135.0 {
                                                            let v140 =
                                                                C::unpack_value_array_2(ctx, v139);
                                                            let v151 = constructor_imul(
                                                                ctx, v2.0, v140.0, v140.1,
                                                            );
                                                            let v152 = constructor_imul(
                                                                ctx, v2.0, v131.1, v7.1,
                                                            );
                                                            let v153 = constructor_imul(
                                                                ctx, v2.0, v151, v152,
                                                            );
                                                            let v154 = C::subsume(ctx, v153);
                                                            // Rule at src/opts/arithmetic.isle line 141.
                                                            returns.extend(Some(v154));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        let v86 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v87) = v86 {
                                            let v88 = C::imm64(ctx, v87);
                                            let v89 = constructor_iconst(ctx, v2.0, v88);
                                            let v90 = constructor_ishl(ctx, v2.0, v7.1, v89);
                                            // Rule at src/opts/arithmetic.isle line 100.
                                            returns.extend(Some(v90));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        if v2.0 == v19.0 {
                                            let v558 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 102.
                                            returns.extend(Some(v558));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v889 =
                                                            constructor_umulhi(ctx, v831, v36, v38);
                                                        let v890 =
                                                            constructor_splat(ctx, v2.0, v889);
                                                        // Rule at src/opts/vector.isle line 42.
                                                        returns.extend(Some(v890));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v831 = C::lane_type(ctx, v2.0);
                                                        let v887 =
                                                            constructor_smulhi(ctx, v831, v36, v38);
                                                        let v888 =
                                                            constructor_splat(ctx, v2.0, v887);
                                                        // Rule at src/opts/vector.isle line 39.
                                                        returns.extend(Some(v888));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 82.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v43 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v44) = v43 {
                                        if v11.0 == v44 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v499 = C::u64_udiv(ctx, v24, v16);
                                                        if let Some(v500) = v499 {
                                                            if v11.0 == v19.0 {
                                                                let v501 =
                                                                    C::imm64_masked(ctx, v44, v500);
                                                                let v502 = constructor_iconst(
                                                                    ctx, v44, v501,
                                                                );
                                                                let v503 = C::subsume(ctx, v502);
                                                                // Rule at src/opts/cprop.isle line 28.
                                                                returns.extend(Some(v503));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 78.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v43 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v44) = v43 {
                                        if v11.0 == v44 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v494 = C::u64_sdiv(ctx, v24, v16);
                                                        if let Some(v495) = v494 {
                                                            if v11.0 == v19.0 {
                                                                let v496 =
                                                                    C::imm64_masked(ctx, v44, v495);
                                                                let v497 = constructor_iconst(
                                                                    ctx, v44, v496,
                                                                );
                                                                let v498 = C::subsume(ctx, v497);
                                                                // Rule at src/opts/cprop.isle line 21.
                                                                returns.extend(Some(v498));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Band = v129 {
                                        if v2.0 == v19.0 {
                                            let mut v10 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.1, &mut v10);
                                            let mut v10 = v10.into_context_iter();
                                            while let Some(v11) = v10.next(ctx) {
                                                match &v11.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v111,
                                                        args: ref v112,
                                                    } => {
                                                        if let &Opcode::Band = v111 {
                                                            if v2.0 == v11.0 {
                                                                let v113 = C::unpack_value_array_2(
                                                                    ctx, v112,
                                                                );
                                                                let mut v116 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v113.1, &mut v116,
                                                                );
                                                                let mut v116 =
                                                                    v116.into_context_iter();
                                                                while let Some(v117) =
                                                                    v116.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v631,
                                                                        imm: v632,
                                                                    } = &v117.1 {
                                                                        if let &Opcode::Iconst = v631 {
                                                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                                                            let mut v182 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                            let mut v182 = v182.into_context_iter();
                                                                            while let Some(v183) = v182.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v186,
                                                                                    imm: v187,
                                                                                } = &v183.1 {
                                                                                    if let &Opcode::Iconst = v186 {
                                                                                        let v639 = constructor_band(ctx, v2.0, v131.0, v113.0);
                                                                                        let v640 = constructor_band(ctx, v2.0, v131.1, v113.1);
                                                                                        let v641 = constructor_band(ctx, v2.0, v639, v640);
                                                                                        // Rule at src/opts/cprop.isle line 226.
                                                                                        returns.extend(Some(v641));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } => {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            if v2.0 == v183.0 {
                                                                                let v590 = constructor_band(ctx, v2.0, v131.1, v7.1);
                                                                                let v591 = constructor_band(ctx, v2.0, v131.0, v590);
                                                                                // Rule at src/opts/cprop.isle line 162.
                                                                                returns.extend(Some(v591));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                            let mut v134 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v131.0, &mut v134);
                                            let mut v134 = v134.into_context_iter();
                                            while let Some(v135) = v134.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v138,
                                                    args: ref v139,
                                                } = &v135.1
                                                {
                                                    if let &Opcode::Band = v138 {
                                                        if v2.0 == v135.0 {
                                                            let v140 =
                                                                C::unpack_value_array_2(ctx, v139);
                                                            let v159 = constructor_band(
                                                                ctx, v2.0, v140.0, v140.1,
                                                            );
                                                            let v160 = constructor_band(
                                                                ctx, v2.0, v131.1, v7.1,
                                                            );
                                                            let v161 = constructor_band(
                                                                ctx, v2.0, v159, v160,
                                                            );
                                                            let v162 = C::subsume(ctx, v161);
                                                            // Rule at src/opts/arithmetic.isle line 146.
                                                            returns.extend(Some(v162));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v692,
                                    args: ref v693,
                                    cond: ref v694,
                                } => {
                                    if let &Opcode::Icmp = v692 {
                                        let mut v10 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.1, &mut v10);
                                        let mut v10 = v10.into_context_iter();
                                        while let Some(v11) = v10.next(ctx) {
                                            match &v11.1 {
                                                &InstructionData::IntCompare {
                                                    opcode: ref v717,
                                                    args: ref v718,
                                                    cond: ref v719,
                                                } => {
                                                    if let &Opcode::Icmp = v717 {
                                                        let v43 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v44) = v43 {
                                                            let v723 = constructor_intcc_comparable(
                                                                ctx, v694, v719,
                                                            );
                                                            if let Some(v724) = v723 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v44 {
                                                                        let v695 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v693,
                                                                            );
                                                                        let v720 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v718,
                                                                            );
                                                                        if v695.0 == v720.0 {
                                                                            if v695.1 == v720.1 {
                                                                                let v725 = constructor_decompose_intcc(ctx, v694);
                                                                                let v726 = constructor_decompose_intcc(ctx, v719);
                                                                                let v727 =
                                                                                    C::u64_and(
                                                                                        ctx, v725,
                                                                                        v726,
                                                                                    );
                                                                                let v728 = constructor_compose_icmp(ctx, v44, v727, v724, v695.0, v695.1);
                                                                                // Rule at src/opts/icmp.isle line 128.
                                                                                returns.extend(
                                                                                    Some(v728),
                                                                                );
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } => {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v690 = C::ty_int(ctx, v2.0);
                                                            if let Some(v691) = v690 {
                                                                // Rule at src/opts/icmp.isle line 39.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    match v35 {
                                        &Opcode::Splat => {
                                            let v871 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v872) = v871 {
                                                if v2.0 == v19.0 {
                                                    let mut v10 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.1, &mut v10);
                                                    let mut v10 = v10.into_context_iter();
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v37,
                                                            arg: v38,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Splat = v37 {
                                                                if v2.0 == v11.0 {
                                                                    let v831 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v873 = constructor_band(
                                                                        ctx, v831, v36, v38,
                                                                    );
                                                                    let v874 = constructor_splat(
                                                                        ctx, v2.0, v873,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 14.
                                                                    returns.extend(Some(v874));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v7.1 == v36 {
                                                        if v19.0 == v46 {
                                                            let v48 = C::imm64(ctx, 0x0);
                                                            let v49 =
                                                                constructor_iconst(ctx, v46, v48);
                                                            let v50 = C::subsume(ctx, v49);
                                                            // Rule at src/opts/bitops.isle line 50.
                                                            returns.extend(Some(v50));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v10 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.1, &mut v10);
                                            let mut v10 = v10.into_context_iter();
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v690 = C::ty_int(ctx, v2.0);
                                                            if let Some(v691) = v690 {
                                                                let mut v698 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v36, &mut v698,
                                                                );
                                                                let mut v698 =
                                                                    v698.into_context_iter();
                                                                while let Some(v699) =
                                                                    v698.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v702,
                                                                        args: ref v703,
                                                                        cond: ref v704,
                                                                    } = &v699.1 {
                                                                        if let &Opcode::Icmp = v702 {
                                                                            // Rule at src/opts/icmp.isle line 44.
                                                                            returns.extend(Some(v7.0));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        let v650 = C::value_type(ctx, v36);
                                                        let v651 = C::ty_mask(ctx, v650);
                                                        let v652 = C::u64_and(ctx, v16, v651);
                                                        let v653 = C::u64_eq(ctx, v651, v652);
                                                        if v653 == true {
                                                            // Rule at src/opts/extends.isle line 9.
                                                            returns.extend(Some(v7.0));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let mut v10 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.1, &mut v10);
                                            let mut v10 = v10.into_context_iter();
                                            while let Some(v11) = v10.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v14,
                                                    imm: v15,
                                                } = &v11.1
                                                {
                                                    if let &Opcode::Iconst = v14 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        let v650 = C::value_type(ctx, v36);
                                                        let v651 = C::ty_mask(ctx, v650);
                                                        let v654 = C::u64_eq(ctx, v16, v651);
                                                        if v654 == true {
                                                            let v655 =
                                                                constructor_uextend(ctx, v2.0, v36);
                                                            // Rule at src/opts/extends.isle line 15.
                                                            returns.extend(Some(v655));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 48.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v175 = C::i64_sextend_imm64(ctx, v2.0, v23);
                                            if v175 == -0x1 {
                                                let v51 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 42.
                                                returns.extend(Some(v51));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v560 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 109.
                                            returns.extend(Some(v560));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v19.0 == v44 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v508 =
                                                                    C::u64_and(ctx, v24, v16);
                                                                let v509 =
                                                                    C::imm64_masked(ctx, v44, v508);
                                                                let v510 = constructor_iconst(
                                                                    ctx, v44, v509,
                                                                );
                                                                let v511 = C::subsume(ctx, v510);
                                                                // Rule at src/opts/cprop.isle line 41.
                                                                returns.extend(Some(v511));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 12.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Band = v111 {
                                        if v2.0 == v11.0 {
                                            let v113 = C::unpack_value_array_2(ctx, v112);
                                            let mut v116 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v113.1, &mut v116);
                                            let mut v116 = v116.into_context_iter();
                                            while let Some(v117) = v116.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v120,
                                                    args: ref v121,
                                                } = &v117.1
                                                {
                                                    if let &Opcode::Band = v120 {
                                                        if v2.0 == v117.0 {
                                                            let v155 = constructor_band(
                                                                ctx, v2.0, v7.0, v113.0,
                                                            );
                                                            let v122 =
                                                                C::unpack_value_array_2(ctx, v121);
                                                            let v156 = constructor_band(
                                                                ctx, v2.0, v122.0, v122.1,
                                                            );
                                                            let v157 = constructor_band(
                                                                ctx, v2.0, v155, v156,
                                                            );
                                                            let v158 = C::subsume(ctx, v157);
                                                            // Rule at src/opts/arithmetic.isle line 144.
                                                            returns.extend(Some(v158));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    if let &Opcode::Bnot = v37 {
                                        if v7.0 == v38 {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v11.0 == v46 {
                                                        let v48 = C::imm64(ctx, 0x0);
                                                        let v49 = constructor_iconst(ctx, v46, v48);
                                                        let v50 = C::subsume(ctx, v49);
                                                        // Rule at src/opts/bitops.isle line 49.
                                                        returns.extend(Some(v50));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v51 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 47.
                                                returns.extend(Some(v51));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                            if v52 == -0x1 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 39.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 14.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 38.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    match v129 {
                                        &Opcode::Band => {
                                            let mut v10 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.1, &mut v10);
                                            let mut v10 = v10.into_context_iter();
                                            while let Some(v11) = v10.next(ctx) {
                                                match &v11.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v111,
                                                        args: ref v112,
                                                    } => {
                                                        if let &Opcode::Band = v111 {
                                                            let v774 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v775) = v774 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v775 {
                                                                        let v113 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v112,
                                                                            );
                                                                        let mut v116 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v113.1, &mut v116,
                                                                        );
                                                                        let mut v116 = v116
                                                                            .into_context_iter();
                                                                        while let Some(v117) =
                                                                            v116.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v779,
                                                                                arg: v780,
                                                                            } = &v117.1 {
                                                                                if let &Opcode::Bnot = v779 {
                                                                                    if v11.0 == v117.0 {
                                                                                        let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                        if v131.0 == v780 {
                                                                                            let v781 = constructor_bitselect(ctx, v775, v131.0, v131.1, v113.0);
                                                                                            // Rule at src/opts/selects.isle line 64.
                                                                                            returns.extend(Some(v781));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v131.1 == v780 {
                                                                                            let v783 = constructor_bitselect(ctx, v775, v131.1, v131.0, v113.0);
                                                                                            // Rule at src/opts/selects.isle line 66.
                                                                                            returns.extend(Some(v783));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v131 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v130,
                                                                            );
                                                                        let mut v134 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v131.0, &mut v134,
                                                                        );
                                                                        let mut v134 = v134
                                                                            .into_context_iter();
                                                                        while let Some(v135) =
                                                                            v134.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v200,
                                                                                arg: v201,
                                                                            } = &v135.1 {
                                                                                if let &Opcode::Bnot = v200 {
                                                                                    if v11.0 == v135.0 {
                                                                                        if v113.1 == v201 {
                                                                                            let v785 = constructor_bitselect(ctx, v775, v201, v113.0, v131.1);
                                                                                            // Rule at src/opts/selects.isle line 68.
                                                                                            returns.extend(Some(v785));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v113.0 == v201 {
                                                                                            let v784 = constructor_bitselect(ctx, v775, v201, v113.1, v131.1);
                                                                                            // Rule at src/opts/selects.isle line 67.
                                                                                            returns.extend(Some(v784));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v182 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v131.1, &mut v182,
                                                                        );
                                                                        let mut v182 = v182
                                                                            .into_context_iter();
                                                                        while let Some(v183) =
                                                                            v182.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v195,
                                                                                arg: v196,
                                                                            } = &v183.1 {
                                                                                if let &Opcode::Bnot = v195 {
                                                                                    if v11.0 == v183.0 {
                                                                                        if v113.1 == v196 {
                                                                                            let v787 = constructor_bitselect(ctx, v775, v196, v113.0, v131.0);
                                                                                            // Rule at src/opts/selects.isle line 70.
                                                                                            returns.extend(Some(v787));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v113.0 == v196 {
                                                                                            let v786 = constructor_bitselect(ctx, v775, v196, v113.1, v131.0);
                                                                                            // Rule at src/opts/selects.isle line 69.
                                                                                            returns.extend(Some(v786));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v265 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v113.0, &mut v265,
                                                                        );
                                                                        let mut v265 = v265
                                                                            .into_context_iter();
                                                                        while let Some(v266) =
                                                                            v265.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v776,
                                                                                arg: v777,
                                                                            } = &v266.1 {
                                                                                if let &Opcode::Bnot = v776 {
                                                                                    if v11.0 == v266.0 {
                                                                                        if v131.0 == v777 {
                                                                                            let v778 = constructor_bitselect(ctx, v775, v131.0, v131.1, v113.1);
                                                                                            // Rule at src/opts/selects.isle line 63.
                                                                                            returns.extend(Some(v778));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v131.1 == v777 {
                                                                                            let v782 = constructor_bitselect(ctx, v775, v131.1, v131.0, v113.1);
                                                                                            // Rule at src/opts/selects.isle line 65.
                                                                                            returns.extend(Some(v782));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v37,
                                                        arg: v38,
                                                    } => {
                                                        if let &Opcode::Bnot = v37 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    if v38 == v131.1 {
                                                                        let v180 = constructor_bor(
                                                                            ctx, v2.0, v131.0, v7.1,
                                                                        );
                                                                        // Rule at src/opts/bitops.isle line 64.
                                                                        returns.extend(Some(v180));
                                                                        if returns.len()
                                                                            >= MAX_ISLE_RETURNS
                                                                        {
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } => {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                let v189 = C::ty_mask(ctx, v2.0);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v190 = C::u64_and(ctx, v189, v16);
                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                let v191 = C::u64_not(ctx, v188);
                                                                                let v192 = C::u64_and(ctx, v189, v191);
                                                                                let v193 = C::u64_eq(ctx, v190, v192);
                                                                                if v193 == true {
                                                                                    if v2.0 == v183.0 {
                                                                                        let v180 = constructor_bor(ctx, v2.0, v131.0, v7.1);
                                                                                        // Rule at src/opts/bitops.isle line 84.
                                                                                        returns.extend(Some(v180));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let mut v10 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.1, &mut v10);
                                            let mut v10 = v10.into_context_iter();
                                            while let Some(v11) = v10.next(ctx) {
                                                match &v11.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v111,
                                                        args: ref v112,
                                                    } => {
                                                        if let &Opcode::Bor = v111 {
                                                            let v113 =
                                                                C::unpack_value_array_2(ctx, v112);
                                                            let mut v116 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v113.1, &mut v116,
                                                            );
                                                            let mut v116 = v116.into_context_iter();
                                                            while let Some(v117) = v116.next(ctx) {
                                                                match &v117.1 {
                                                                    &InstructionData::Binary {
                                                                        opcode: ref v120,
                                                                        args: ref v121,
                                                                    } => {
                                                                        match v120 {
                                                                            &Opcode::Bor => {
                                                                                if v2.0 == I64 {
                                                                                    if v11.0 == I64 {
                                                                                        if v19.0 == I64 {
                                                                                            if v117.0 == I64 {
                                                                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                                                C::inst_data_etor(ctx, v131.0, &mut v134);
                                                                                                let mut v134 = v134.into_context_iter();
                                                                                                while let Some(v135) = v134.next(ctx) {
                                                                                                    if v135.0 == I64 {
                                                                                                        if let &InstructionData::Binary {
                                                                                                            opcode: ref v138,
                                                                                                            args: ref v139,
                                                                                                        } = &v135.1 {
                                                                                                            if let &Opcode::Bor = v138 {
                                                                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                                                                C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                                                                let mut v182 = v182.into_context_iter();
                                                                                                                while let Some(v183) = v182.next(ctx) {
                                                                                                                    if v183.0 == I64 {
                                                                                                                        if let &InstructionData::Binary {
                                                                                                                            opcode: ref v237,
                                                                                                                            args: ref v238,
                                                                                                                        } = &v183.1 {
                                                                                                                            if let &Opcode::Bor = v237 {
                                                                                                                                let v140 = C::unpack_value_array_2(ctx, v139);
                                                                                                                                let mut v230 = C::inst_data_etor_returns::default();
                                                                                                                                C::inst_data_etor(ctx, v140.1, &mut v230);
                                                                                                                                let mut v230 = v230.into_context_iter();
                                                                                                                                while let Some(v231) = v230.next(ctx) {
                                                                                                                                    if v231.0 == I64 {
                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                            opcode: ref v321,
                                                                                                                                            args: ref v322,
                                                                                                                                        } = &v231.1 {
                                                                                                                                            if let &Opcode::Ishl = v321 {
                                                                                                                                                let v239 = C::unpack_value_array_2(ctx, v238);
                                                                                                                                                let mut v242 = C::inst_data_etor_returns::default();
                                                                                                                                                C::inst_data_etor(ctx, v239.0, &mut v242);
                                                                                                                                                let mut v242 = v242.into_context_iter();
                                                                                                                                                while let Some(v243) = v242.next(ctx) {
                                                                                                                                                    if v243.0 == I64 {
                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                            opcode: ref v246,
                                                                                                                                                            args: ref v247,
                                                                                                                                                        } = &v243.1 {
                                                                                                                                                            if let &Opcode::Ishl = v246 {
                                                                                                                                                                let v248 = C::unpack_value_array_2(ctx, v247);
                                                                                                                                                                let mut v251 = C::inst_data_etor_returns::default();
                                                                                                                                                                C::inst_data_etor(ctx, v248.1, &mut v251);
                                                                                                                                                                let mut v251 = v251.into_context_iter();
                                                                                                                                                                while let Some(v252) = v251.next(ctx) {
                                                                                                                                                                    if v252.0 == I64 {
                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                            opcode: ref v255,
                                                                                                                                                                            imm: v256,
                                                                                                                                                                        } = &v252.1 {
                                                                                                                                                                            if let &Opcode::Iconst = v255 {
                                                                                                                                                                                let v257 = C::u64_from_imm64(ctx, v256);
                                                                                                                                                                                if v257 == 0x18 {
                                                                                                                                                                                    let mut v258 = C::inst_data_etor_returns::default();
                                                                                                                                                                                    C::inst_data_etor(ctx, v239.1, &mut v258);
                                                                                                                                                                                    let mut v258 = v258.into_context_iter();
                                                                                                                                                                                    while let Some(v259) = v258.next(ctx) {
                                                                                                                                                                                        if v259.0 == I64 {
                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                opcode: ref v365,
                                                                                                                                                                                                args: ref v366,
                                                                                                                                                                                            } = &v259.1 {
                                                                                                                                                                                                if let &Opcode::Ishl = v365 {
                                                                                                                                                                                                    let mut v265 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                    C::inst_data_etor(ctx, v113.0, &mut v265);
                                                                                                                                                                                                    let mut v265 = v265.into_context_iter();
                                                                                                                                                                                                    while let Some(v266) = v265.next(ctx) {
                                                                                                                                                                                                        if v266.0 == I64 {
                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                opcode: ref v269,
                                                                                                                                                                                                                args: ref v270,
                                                                                                                                                                                                            } = &v266.1 {
                                                                                                                                                                                                                if let &Opcode::Bor = v269 {
                                                                                                                                                                                                                    let v271 = C::unpack_value_array_2(ctx, v270);
                                                                                                                                                                                                                    let mut v274 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                    C::inst_data_etor(ctx, v271.0, &mut v274);
                                                                                                                                                                                                                    let mut v274 = v274.into_context_iter();
                                                                                                                                                                                                                    while let Some(v275) = v274.next(ctx) {
                                                                                                                                                                                                                        if v275.0 == I64 {
                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                opcode: ref v278,
                                                                                                                                                                                                                                args: ref v279,
                                                                                                                                                                                                                            } = &v275.1 {
                                                                                                                                                                                                                                if let &Opcode::Band = v278 {
                                                                                                                                                                                                                                    let v280 = C::unpack_value_array_2(ctx, v279);
                                                                                                                                                                                                                                    let mut v283 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v280.1, &mut v283);
                                                                                                                                                                                                                                    let mut v283 = v283.into_context_iter();
                                                                                                                                                                                                                                    while let Some(v284) = v283.next(ctx) {
                                                                                                                                                                                                                                        if v284.0 == I64 {
                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                opcode: ref v287,
                                                                                                                                                                                                                                                imm: v288,
                                                                                                                                                                                                                                            } = &v284.1 {
                                                                                                                                                                                                                                                if let &Opcode::Iconst = v287 {
                                                                                                                                                                                                                                                    let v289 = C::u64_from_imm64(ctx, v288);
                                                                                                                                                                                                                                                    if v289 == 0xFF000000 {
                                                                                                                                                                                                                                                        let mut v290 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v271.1, &mut v290);
                                                                                                                                                                                                                                                        let mut v290 = v290.into_context_iter();
                                                                                                                                                                                                                                                        while let Some(v291) = v290.next(ctx) {
                                                                                                                                                                                                                                                            if v291.0 == I64 {
                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                    opcode: ref v409,
                                                                                                                                                                                                                                                                    args: ref v410,
                                                                                                                                                                                                                                                                } = &v291.1 {
                                                                                                                                                                                                                                                                    if let &Opcode::Band = v409 {
                                                                                                                                                                                                                                                                        let v122 = C::unpack_value_array_2(ctx, v121);
                                                                                                                                                                                                                                                                        let mut v297 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v122.1, &mut v297);
                                                                                                                                                                                                                                                                        let mut v297 = v297.into_context_iter();
                                                                                                                                                                                                                                                                        while let Some(v298) = v297.next(ctx) {
                                                                                                                                                                                                                                                                            if v298.0 == I64 {
                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                    opcode: ref v469,
                                                                                                                                                                                                                                                                                    args: ref v470,
                                                                                                                                                                                                                                                                                } = &v298.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Ushr = v469 {
                                                                                                                                                                                                                                                                                        let mut v305 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v140.0, &mut v305);
                                                                                                                                                                                                                                                                                        let mut v305 = v305.into_context_iter();
                                                                                                                                                                                                                                                                                        while let Some(v306) = v305.next(ctx) {
                                                                                                                                                                                                                                                                                            if v306.0 == I64 {
                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                    opcode: ref v309,
                                                                                                                                                                                                                                                                                                    args: ref v310,
                                                                                                                                                                                                                                                                                                } = &v306.1 {
                                                                                                                                                                                                                                                                                                    if let &Opcode::Ishl = v309 {
                                                                                                                                                                                                                                                                                                        let v311 = C::unpack_value_array_2(ctx, v310);
                                                                                                                                                                                                                                                                                                        let v471 = C::unpack_value_array_2(ctx, v470);
                                                                                                                                                                                                                                                                                                        if v311.0 == v471.0 {
                                                                                                                                                                                                                                                                                                            let mut v314 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v311.1, &mut v314);
                                                                                                                                                                                                                                                                                                            let mut v314 = v314.into_context_iter();
                                                                                                                                                                                                                                                                                                            while let Some(v315) = v314.next(ctx) {
                                                                                                                                                                                                                                                                                                                if v315.0 == I64 {
                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                        opcode: ref v318,
                                                                                                                                                                                                                                                                                                                        imm: v319,
                                                                                                                                                                                                                                                                                                                    } = &v315.1 {
                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v318 {
                                                                                                                                                                                                                                                                                                                            let v320 = C::u64_from_imm64(ctx, v319);
                                                                                                                                                                                                                                                                                                                            if v320 == 0x38 {
                                                                                                                                                                                                                                                                                                                                let v323 = C::unpack_value_array_2(ctx, v322);
                                                                                                                                                                                                                                                                                                                                let mut v326 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v323.0, &mut v326);
                                                                                                                                                                                                                                                                                                                                let mut v326 = v326.into_context_iter();
                                                                                                                                                                                                                                                                                                                                while let Some(v327) = v326.next(ctx) {
                                                                                                                                                                                                                                                                                                                                    if v327.0 == I64 {
                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                            opcode: ref v330,
                                                                                                                                                                                                                                                                                                                                            args: ref v331,
                                                                                                                                                                                                                                                                                                                                        } = &v327.1 {
                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v330 {
                                                                                                                                                                                                                                                                                                                                                let v332 = C::unpack_value_array_2(ctx, v331);
                                                                                                                                                                                                                                                                                                                                                if v311.0 == v332.0 {
                                                                                                                                                                                                                                                                                                                                                    let mut v335 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v332.1, &mut v335);
                                                                                                                                                                                                                                                                                                                                                    let mut v335 = v335.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                    while let Some(v336) = v335.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                        if v336.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                opcode: ref v339,
                                                                                                                                                                                                                                                                                                                                                                imm: v340,
                                                                                                                                                                                                                                                                                                                                                            } = &v336.1 {
                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v339 {
                                                                                                                                                                                                                                                                                                                                                                    let v341 = C::u64_from_imm64(ctx, v340);
                                                                                                                                                                                                                                                                                                                                                                    if v341 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                        let mut v342 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v323.1, &mut v342);
                                                                                                                                                                                                                                                                                                                                                                        let mut v342 = v342.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                        while let Some(v343) = v342.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                            if v343.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v346,
                                                                                                                                                                                                                                                                                                                                                                                    imm: v347,
                                                                                                                                                                                                                                                                                                                                                                                } = &v343.1 {
                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v346 {
                                                                                                                                                                                                                                                                                                                                                                                        let v348 = C::u64_from_imm64(ctx, v347);
                                                                                                                                                                                                                                                                                                                                                                                        if v348 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                            let mut v349 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v248.0, &mut v349);
                                                                                                                                                                                                                                                                                                                                                                                            let mut v349 = v349.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v350) = v349.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                if v350.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v353,
                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v354,
                                                                                                                                                                                                                                                                                                                                                                                                    } = &v350.1 {
                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v353 {
                                                                                                                                                                                                                                                                                                                                                                                                            let v355 = C::unpack_value_array_2(ctx, v354);
                                                                                                                                                                                                                                                                                                                                                                                                            if v311.0 == v355.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                let mut v358 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v355.1, &mut v358);
                                                                                                                                                                                                                                                                                                                                                                                                                let mut v358 = v358.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v359) = v358.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                    if v359.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v362,
                                                                                                                                                                                                                                                                                                                                                                                                                            imm: v363,
                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v359.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v362 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v364 = C::u64_from_imm64(ctx, v363);
                                                                                                                                                                                                                                                                                                                                                                                                                                if v364 == 0xFF0000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                    let v367 = C::unpack_value_array_2(ctx, v366);
                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v370 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v367.0, &mut v370);
                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v370 = v370.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v371) = v370.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if v371.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v374,
                                                                                                                                                                                                                                                                                                                                                                                                                                                args: ref v375,
                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v371.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Band = v374 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v376 = C::unpack_value_array_2(ctx, v375);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v311.0 == v376.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v379 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v376.1, &mut v379);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v379 = v379.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v380) = v379.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v380.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v383,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v384,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v380.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v383 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v385 = C::u64_from_imm64(ctx, v384);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v385 == 0xFF000000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v386 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v367.1, &mut v386);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v386 = v386.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v387) = v386.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v387.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v390,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v391,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v387.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v390 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v392 = C::u64_from_imm64(ctx, v391);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v392 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v393 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v280.0, &mut v393);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v393 = v393.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v394) = v393.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v394.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v397,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v398,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v394.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Ushr = v397 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v399 = C::unpack_value_array_2(ctx, v398);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v311.0 == v399.0 {
let mut v402 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v399.1, &mut v402);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v402 = v402.into_context_iter();
while let Some(v403) = v402.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v403.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v406,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v407,
} = &v403.1 {
if let &Opcode::Iconst = v406 {
let v408 = C::u64_from_imm64(ctx, v407);
if v408 == 0x8 {
let v411 = C::unpack_value_array_2(ctx, v410);
let mut v414 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v411.0, &mut v414);
let mut v414 = v414.into_context_iter();
while let Some(v415) = v414.next(ctx) {
if v415.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v418,
args: ref v419,
} = &v415.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Ushr = v418 {
let v420 = C::unpack_value_array_2(ctx, v419);
if v311.0 == v420.0 {
let mut v423 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v420.1, &mut v423);
let mut v423 = v423.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v424) = v423.next(ctx) {
if v424.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v427,
imm: v428,
} = &v424.1 {
if let &Opcode::Iconst = v427 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v429 = C::u64_from_imm64(ctx, v428);
if v429 == 0x18 {
let mut v430 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v411.1, &mut v430);
let mut v430 = v430.into_context_iter();
while let Some(v431) = v430.next(ctx) {
if v431.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v434,
imm: v435,
} = &v431.1 {
if let &Opcode::Iconst = v434 {
let v436 = C::u64_from_imm64(ctx, v435);
if v436 == 0xFF0000 {
let mut v437 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v122.0, &mut v437);
let mut v437 = v437.into_context_iter();
while let Some(v438) = v437.next(ctx) {
if v438.0 == I64 {
if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v441,
args: ref v442,
} = &v438.1 {
if let &Opcode::Band = v441 {
let v443 = C::unpack_value_array_2(ctx, v442);
let mut v446 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v443.0, &mut v446);
let mut v446 = v446.into_context_iter();
while let Some(v447) = v446.next(ctx) {
if v447.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v450,
args: ref v451,
} = &v447.1 {
if let &Opcode::Ushr = v450 {
let v452 = C::unpack_value_array_2(ctx, v451);
if v311.0 == v452.0 {
let mut v455 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v452.1, &mut v455);
let mut v455 = v455.into_context_iter();
while let Some(v456) = v455.next(ctx) {
if v456.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v459,
imm: v460,
} = &v456.1 {
if let &Opcode::Iconst = v459 {
let v461 = C::u64_from_imm64(ctx, v460);
if v461 == 0x28 {
let mut v462 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v443.1, &mut v462);
let mut v462 = v462.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v463) = v462.next(ctx) {
if v463.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v466,
imm: v467,
} = &v463.1 {
if let &Opcode::Iconst = v466 {
let v468 = C::u64_from_imm64(ctx, v467);
if v468 == 0xFF00 {
let mut v474 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v471.1, &mut v474);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v474 = v474.into_context_iter();
while let Some(v475) = v474.next(ctx) {
if v475.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v478,
imm: v479,
} = &v475.1 {
if let &Opcode::Iconst = v478 {
let v480 = C::u64_from_imm64(ctx, v479);
if v480 == 0x38 {
let v481 = constructor_bswap(ctx, v2.0, v311.0);
ule at src/opts/bitops.isle line 171.
returns.extend(Some(v481));
if returns.len() >= MAX_ISLE_RETURNS { return; }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &Opcode::Ushr => {
                                                                                if v2.0 == I32 {
                                                                                    if v11.0 == I32 {
                                                                                        if v19.0 == I32 {
                                                                                            if v117.0 == I32 {
                                                                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                                                C::inst_data_etor(ctx, v131.0, &mut v134);
                                                                                                let mut v134 = v134.into_context_iter();
                                                                                                while let Some(v135) = v134.next(ctx) {
                                                                                                    if v135.0 == I32 {
                                                                                                        if let &InstructionData::Binary {
                                                                                                            opcode: ref v138,
                                                                                                            args: ref v139,
                                                                                                        } = &v135.1 {
                                                                                                            if let &Opcode::Ishl = v138 {
                                                                                                                let v122 = C::unpack_value_array_2(ctx, v121);
                                                                                                                let v140 = C::unpack_value_array_2(ctx, v139);
                                                                                                                if v122.0 == v140.0 {
                                                                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                                                                    C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                                                                    let mut v182 = v182.into_context_iter();
                                                                                                                    while let Some(v183) = v182.next(ctx) {
                                                                                                                        if v183.0 == I32 {
                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                opcode: ref v237,
                                                                                                                                args: ref v238,
                                                                                                                            } = &v183.1 {
                                                                                                                                if let &Opcode::Ishl = v237 {
                                                                                                                                    let mut v230 = C::inst_data_etor_returns::default();
                                                                                                                                    C::inst_data_etor(ctx, v140.1, &mut v230);
                                                                                                                                    let mut v230 = v230.into_context_iter();
                                                                                                                                    while let Some(v231) = v230.next(ctx) {
                                                                                                                                        if v231.0 == I32 {
                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                opcode: ref v234,
                                                                                                                                                imm: v235,
                                                                                                                                            } = &v231.1 {
                                                                                                                                                if let &Opcode::Iconst = v234 {
                                                                                                                                                    let v236 = C::u64_from_imm64(ctx, v235);
                                                                                                                                                    if v236 == 0x18 {
                                                                                                                                                        let v239 = C::unpack_value_array_2(ctx, v238);
                                                                                                                                                        let mut v242 = C::inst_data_etor_returns::default();
                                                                                                                                                        C::inst_data_etor(ctx, v239.0, &mut v242);
                                                                                                                                                        let mut v242 = v242.into_context_iter();
                                                                                                                                                        while let Some(v243) = v242.next(ctx) {
                                                                                                                                                            if v243.0 == I32 {
                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                    opcode: ref v246,
                                                                                                                                                                    args: ref v247,
                                                                                                                                                                } = &v243.1 {
                                                                                                                                                                    if let &Opcode::Band = v246 {
                                                                                                                                                                        let v248 = C::unpack_value_array_2(ctx, v247);
                                                                                                                                                                        if v122.0 == v248.0 {
                                                                                                                                                                            let mut v251 = C::inst_data_etor_returns::default();
                                                                                                                                                                            C::inst_data_etor(ctx, v248.1, &mut v251);
                                                                                                                                                                            let mut v251 = v251.into_context_iter();
                                                                                                                                                                            while let Some(v252) = v251.next(ctx) {
                                                                                                                                                                                if v252.0 == I32 {
                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                        opcode: ref v255,
                                                                                                                                                                                        imm: v256,
                                                                                                                                                                                    } = &v252.1 {
                                                                                                                                                                                        if let &Opcode::Iconst = v255 {
                                                                                                                                                                                            let v257 = C::u64_from_imm64(ctx, v256);
                                                                                                                                                                                            if v257 == 0xFF00 {
                                                                                                                                                                                                let mut v258 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                C::inst_data_etor(ctx, v239.1, &mut v258);
                                                                                                                                                                                                let mut v258 = v258.into_context_iter();
                                                                                                                                                                                                while let Some(v259) = v258.next(ctx) {
                                                                                                                                                                                                    if v259.0 == I32 {
                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                            opcode: ref v262,
                                                                                                                                                                                                            imm: v263,
                                                                                                                                                                                                        } = &v259.1 {
                                                                                                                                                                                                            if let &Opcode::Iconst = v262 {
                                                                                                                                                                                                                let v264 = C::u64_from_imm64(ctx, v263);
                                                                                                                                                                                                                if v264 == 0x8 {
                                                                                                                                                                                                                    let mut v265 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                    C::inst_data_etor(ctx, v113.0, &mut v265);
                                                                                                                                                                                                                    let mut v265 = v265.into_context_iter();
                                                                                                                                                                                                                    while let Some(v266) = v265.next(ctx) {
                                                                                                                                                                                                                        if v266.0 == I32 {
                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                opcode: ref v269,
                                                                                                                                                                                                                                args: ref v270,
                                                                                                                                                                                                                            } = &v266.1 {
                                                                                                                                                                                                                                if let &Opcode::Band = v269 {
                                                                                                                                                                                                                                    let v271 = C::unpack_value_array_2(ctx, v270);
                                                                                                                                                                                                                                    let mut v274 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v271.0, &mut v274);
                                                                                                                                                                                                                                    let mut v274 = v274.into_context_iter();
                                                                                                                                                                                                                                    while let Some(v275) = v274.next(ctx) {
                                                                                                                                                                                                                                        if v275.0 == I32 {
                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                opcode: ref v278,
                                                                                                                                                                                                                                                args: ref v279,
                                                                                                                                                                                                                                            } = &v275.1 {
                                                                                                                                                                                                                                                if let &Opcode::Ushr = v278 {
                                                                                                                                                                                                                                                    let v280 = C::unpack_value_array_2(ctx, v279);
                                                                                                                                                                                                                                                    if v122.0 == v280.0 {
                                                                                                                                                                                                                                                        let mut v283 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v280.1, &mut v283);
                                                                                                                                                                                                                                                        let mut v283 = v283.into_context_iter();
                                                                                                                                                                                                                                                        while let Some(v284) = v283.next(ctx) {
                                                                                                                                                                                                                                                            if v284.0 == I32 {
                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                    opcode: ref v287,
                                                                                                                                                                                                                                                                    imm: v288,
                                                                                                                                                                                                                                                                } = &v284.1 {
                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v287 {
                                                                                                                                                                                                                                                                        let v289 = C::u64_from_imm64(ctx, v288);
                                                                                                                                                                                                                                                                        if v289 == 0x8 {
                                                                                                                                                                                                                                                                            let mut v290 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v271.1, &mut v290);
                                                                                                                                                                                                                                                                            let mut v290 = v290.into_context_iter();
                                                                                                                                                                                                                                                                            while let Some(v291) = v290.next(ctx) {
                                                                                                                                                                                                                                                                                if v291.0 == I32 {
                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                        opcode: ref v294,
                                                                                                                                                                                                                                                                                        imm: v295,
                                                                                                                                                                                                                                                                                    } = &v291.1 {
                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v294 {
                                                                                                                                                                                                                                                                                            let v296 = C::u64_from_imm64(ctx, v295);
                                                                                                                                                                                                                                                                                            if v296 == 0xFF00 {
                                                                                                                                                                                                                                                                                                let mut v297 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v122.1, &mut v297);
                                                                                                                                                                                                                                                                                                let mut v297 = v297.into_context_iter();
                                                                                                                                                                                                                                                                                                while let Some(v298) = v297.next(ctx) {
                                                                                                                                                                                                                                                                                                    if v298.0 == I32 {
                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                            opcode: ref v301,
                                                                                                                                                                                                                                                                                                            imm: v302,
                                                                                                                                                                                                                                                                                                        } = &v298.1 {
                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v301 {
                                                                                                                                                                                                                                                                                                                let v303 = C::u64_from_imm64(ctx, v302);
                                                                                                                                                                                                                                                                                                                if v303 == 0x18 {
                                                                                                                                                                                                                                                                                                                    let v304 = constructor_bswap(ctx, v2.0, v140.0);
                                                                                                                                                                                                                                                                                                                    // Rule at src/opts/bitops.isle line 158.
                                                                                                                                                                                                                                                                                                                    returns.extend(Some(v304));
                                                                                                                                                                                                                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                    &InstructionData::UnaryImm {
                                                                        opcode: ref v631,
                                                                        imm: v632,
                                                                    } => {
                                                                        if let &Opcode::Iconst = v631 {
                                                                            if v2.0 == v11.0 {
                                                                                if v2.0 == v19.0 {
                                                                                    let v131 = C::unpack_value_array_2(ctx, v130);
                                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                                    let mut v182 = v182.into_context_iter();
                                                                                    while let Some(v183) = v182.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v186,
                                                                                            imm: v187,
                                                                                        } = &v183.1 {
                                                                                            if let &Opcode::Iconst = v186 {
                                                                                                let v642 = constructor_bor(ctx, v2.0, v131.0, v113.0);
                                                                                                let v643 = constructor_bor(ctx, v2.0, v131.1, v113.1);
                                                                                                let v644 = constructor_bor(ctx, v2.0, v642, v643);
                                                                                                // Rule at src/opts/cprop.isle line 230.
                                                                                                returns.extend(Some(v644));
                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } => {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                if v2.0 == v183.0 {
                                                                                    let v588 = constructor_bor(ctx, v2.0, v131.1, v7.1);
                                                                                    let v589 = constructor_bor(ctx, v2.0, v131.0, v588);
                                                                                    // Rule at src/opts/cprop.isle line 159.
                                                                                    returns.extend(Some(v589));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v690 = C::ty_int(ctx, v2.0);
                                            if let Some(v691) = v690 {
                                                if v19.0 == v691 {
                                                    let mut v10 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.1, &mut v10);
                                                    let mut v10 = v10.into_context_iter();
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v111,
                                                            args: ref v112,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Ushr = v111 {
                                                                if v11.0 == v19.0 {
                                                                    let v113 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v112,
                                                                        );
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    if v113.0 == v131.0 {
                                                                        let mut v116 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v113.1, &mut v116,
                                                                        );
                                                                        let mut v116 = v116
                                                                            .into_context_iter();
                                                                        while let Some(v117) =
                                                                            v116.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v631,
                                                                                imm: v632,
                                                                            } = &v117.1 {
                                                                                if let &Opcode::Iconst = v631 {
                                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                                    let mut v182 = v182.into_context_iter();
                                                                                    while let Some(v183) = v182.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v186,
                                                                                            imm: v187,
                                                                                        } = &v183.1 {
                                                                                            if let &Opcode::Iconst = v186 {
                                                                                                let v850 = C::u64_from_imm64(ctx, v632);
                                                                                                let v851 = C::lane_type(ctx, v691);
                                                                                                let v852 = C::ty_bits_u64(ctx, v851);
                                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                                let v853 = C::u64_sub(ctx, v852, v188);
                                                                                                let v854 = C::u64_eq(ctx, v850, v853);
                                                                                                if v854 == true {
                                                                                                    let v855 = constructor_rotl(ctx, v691, v131.0, v131.1);
                                                                                                    // Rule at src/opts/shifts.isle line 279.
                                                                                                    returns.extend(Some(v855));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v690 = C::ty_int(ctx, v2.0);
                                            if let Some(v691) = v690 {
                                                if v19.0 == v691 {
                                                    let mut v10 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.1, &mut v10);
                                                    let mut v10 = v10.into_context_iter();
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v111,
                                                            args: ref v112,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Ishl = v111 {
                                                                if v11.0 == v19.0 {
                                                                    let v113 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v112,
                                                                        );
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    if v113.0 == v131.0 {
                                                                        let mut v116 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v113.1, &mut v116,
                                                                        );
                                                                        let mut v116 = v116
                                                                            .into_context_iter();
                                                                        while let Some(v117) =
                                                                            v116.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v631,
                                                                                imm: v632,
                                                                            } = &v117.1 {
                                                                                if let &Opcode::Iconst = v631 {
                                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v131.1, &mut v182);
                                                                                    let mut v182 = v182.into_context_iter();
                                                                                    while let Some(v183) = v182.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v186,
                                                                                            imm: v187,
                                                                                        } = &v183.1 {
                                                                                            if let &Opcode::Iconst = v186 {
                                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                                let v851 = C::lane_type(ctx, v691);
                                                                                                let v852 = C::ty_bits_u64(ctx, v851);
                                                                                                let v850 = C::u64_from_imm64(ctx, v632);
                                                                                                let v856 = C::u64_sub(ctx, v852, v850);
                                                                                                let v857 = C::u64_eq(ctx, v188, v856);
                                                                                                if v857 == true {
                                                                                                    let v858 = constructor_rotl(ctx, v691, v131.0, v113.1);
                                                                                                    // Rule at src/opts/shifts.isle line 284.
                                                                                                    returns.extend(Some(v858));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v692,
                                    args: ref v693,
                                    cond: ref v694,
                                } => {
                                    if let &Opcode::Icmp = v692 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v19.0 == v44 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v717,
                                                        args: ref v718,
                                                        cond: ref v719,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Icmp = v717 {
                                                            let v723 = constructor_intcc_comparable(
                                                                ctx, v694, v719,
                                                            );
                                                            if let Some(v724) = v723 {
                                                                if v11.0 == v19.0 {
                                                                    let v695 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v693,
                                                                        );
                                                                    let v720 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v718,
                                                                        );
                                                                    if v695.0 == v720.0 {
                                                                        if v695.1 == v720.1 {
                                                                            let v725 = constructor_decompose_intcc(ctx, v694);
                                                                            let v726 = constructor_decompose_intcc(ctx, v719);
                                                                            let v729 = C::u64_or(
                                                                                ctx, v725, v726,
                                                                            );
                                                                            let v730 = constructor_compose_icmp(ctx, v44, v729, v724, v695.0, v695.1);
                                                                            // Rule at src/opts/icmp.isle line 132.
                                                                            returns
                                                                                .extend(Some(v730));
                                                                            if returns.len()
                                                                                >= MAX_ISLE_RETURNS
                                                                            {
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    match v35 {
                                        &Opcode::Splat => {
                                            let v871 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v872) = v871 {
                                                if v2.0 == v19.0 {
                                                    let mut v10 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.1, &mut v10);
                                                    let mut v10 = v10.into_context_iter();
                                                    while let Some(v11) = v10.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v37,
                                                            arg: v38,
                                                        } = &v11.1
                                                        {
                                                            if let &Opcode::Splat = v37 {
                                                                if v2.0 == v11.0 {
                                                                    let v831 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v875 = constructor_bor(
                                                                        ctx, v831, v36, v38,
                                                                    );
                                                                    let v876 = constructor_splat(
                                                                        ctx, v2.0, v875,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 18.
                                                                    returns.extend(Some(v876));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v7.1 == v36 {
                                                        if v19.0 == v46 {
                                                            let v171 = C::ty_mask(ctx, v46);
                                                            let v172 = C::imm64(ctx, v171);
                                                            let v173 =
                                                                constructor_iconst(ctx, v46, v172);
                                                            let v174 = C::subsume(ctx, v173);
                                                            // Rule at src/opts/bitops.isle line 35.
                                                            returns.extend(Some(v174));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if v2.0 == v19.0 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v111,
                                                        args: ref v112,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Band = v111 {
                                                            if v2.0 == v11.0 {
                                                                let v113 = C::unpack_value_array_2(
                                                                    ctx, v112,
                                                                );
                                                                if v36 == v113.1 {
                                                                    let v181 = constructor_bor(
                                                                        ctx, v2.0, v113.0, v7.0,
                                                                    );
                                                                    // Rule at src/opts/bitops.isle line 73.
                                                                    returns.extend(Some(v181));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v51 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 8.
                                                returns.extend(Some(v51));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v559 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 106.
                                            returns.extend(Some(v559));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v19.0 == v44 {
                                                let mut v10 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                                let mut v10 = v10.into_context_iter();
                                                while let Some(v11) = v10.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v14,
                                                        imm: v15,
                                                    } = &v11.1
                                                    {
                                                        if let &Opcode::Iconst = v14 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v504 = C::u64_or(ctx, v24, v16);
                                                                let v505 =
                                                                    C::imm64_masked(ctx, v44, v504);
                                                                let v506 = constructor_iconst(
                                                                    ctx, v44, v505,
                                                                );
                                                                let v507 = C::subsume(ctx, v506);
                                                                // Rule at src/opts/cprop.isle line 35.
                                                                returns.extend(Some(v507));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 16.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    if let &Opcode::Bnot = v37 {
                                        if v7.0 == v38 {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v11.0 == v46 {
                                                        let v171 = C::ty_mask(ctx, v46);
                                                        let v172 = C::imm64(ctx, v171);
                                                        let v173 =
                                                            constructor_iconst(ctx, v46, v172);
                                                        let v174 = C::subsume(ctx, v173);
                                                        // Rule at src/opts/bitops.isle line 34.
                                                        returns.extend(Some(v174));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 18.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 12.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Bxor = v111 {
                                        if v2.0 == v11.0 {
                                            let v113 = C::unpack_value_array_2(ctx, v112);
                                            let mut v116 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v113.1, &mut v116);
                                            let mut v116 = v116.into_context_iter();
                                            while let Some(v117) = v116.next(ctx) {
                                                match &v117.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v120,
                                                        args: ref v121,
                                                    } => {
                                                        if let &Opcode::Bxor = v120 {
                                                            if v2.0 == v117.0 {
                                                                let v163 = constructor_bxor(
                                                                    ctx, v2.0, v7.0, v113.0,
                                                                );
                                                                let v122 = C::unpack_value_array_2(
                                                                    ctx, v121,
                                                                );
                                                                let v164 = constructor_bxor(
                                                                    ctx, v2.0, v122.0, v122.1,
                                                                );
                                                                let v165 = constructor_bxor(
                                                                    ctx, v2.0, v163, v164,
                                                                );
                                                                let v166 = C::subsume(ctx, v165);
                                                                // Rule at src/opts/arithmetic.isle line 149.
                                                                returns.extend(Some(v166));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v631,
                                                        imm: v632,
                                                    } => {
                                                        if let &Opcode::Iconst = v631 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v129,
                                                                    args: ref v130,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Bxor = v129 {
                                                                        if v2.0 == v19.0 {
                                                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                                                            let mut v182 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v131.1,
                                                                                &mut v182,
                                                                            );
                                                                            let mut v182 = v182
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v183) =
                                                                                v182.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v186,
                                                                                    imm: v187,
                                                                                } = &v183.1 {
                                                                                    if let &Opcode::Iconst = v186 {
                                                                                        let v645 = constructor_bxor(ctx, v2.0, v131.0, v113.0);
                                                                                        let v646 = constructor_bxor(ctx, v2.0, v131.1, v113.1);
                                                                                        let v647 = constructor_bxor(ctx, v2.0, v645, v646);
                                                                                        // Rule at src/opts/cprop.isle line 234.
                                                                                        returns.extend(Some(v647));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Splat => {
                                            let v871 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v872) = v871 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v35,
                                                            arg: v36,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v35 {
                                                                if v2.0 == v19.0 {
                                                                    let v831 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v877 = constructor_bxor(
                                                                        ctx, v831, v36, v38,
                                                                    );
                                                                    let v878 = constructor_splat(
                                                                        ctx, v2.0, v877,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 22.
                                                                    returns.extend(Some(v878));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v7.0 == v38 {
                                                        if v11.0 == v46 {
                                                            let v171 = C::ty_mask(ctx, v46);
                                                            let v172 = C::imm64(ctx, v171);
                                                            let v173 =
                                                                constructor_iconst(ctx, v46, v172);
                                                            let v174 = C::subsume(ctx, v173);
                                                            // Rule at src/opts/bitops.isle line 32.
                                                            returns.extend(Some(v174));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 16.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v52 = C::i64_sextend_imm64(ctx, v2.0, v15);
                                            if v52 == -0x1 {
                                                let v194 = constructor_bnot(ctx, v2.0, v7.0);
                                                // Rule at src/opts/bitops.isle line 92.
                                                returns.extend(Some(v194));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v129,
                                                    args: ref v130,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bxor = v129 {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let mut v182 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v131.1, &mut v182,
                                                            );
                                                            let mut v182 = v182.into_context_iter();
                                                            while let Some(v183) = v182.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v186,
                                                                    imm: v187,
                                                                } = &v183.1 {
                                                                    if let &Opcode::Iconst = v186 {
                                                                        if v2.0 == v183.0 {
                                                                            let v592 = constructor_bxor(ctx, v2.0, v131.1, v7.1);
                                                                            let v593 = constructor_bxor(ctx, v2.0, v131.0, v592);
                                                                            // Rule at src/opts/cprop.isle line 165.
                                                                            returns.extend(Some(v593));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v11.0 == v44 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v512 =
                                                                    C::u64_xor(ctx, v24, v16);
                                                                let v513 =
                                                                    C::imm64_masked(ctx, v44, v512);
                                                                let v514 = constructor_iconst(
                                                                    ctx, v44, v513,
                                                                );
                                                                let v515 = C::subsume(ctx, v514);
                                                                // Rule at src/opts/cprop.isle line 47.
                                                                returns.extend(Some(v515));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 22.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    if let &Opcode::Bxor = v129 {
                                        if v2.0 == v19.0 {
                                            let v131 = C::unpack_value_array_2(ctx, v130);
                                            let mut v134 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v131.0, &mut v134);
                                            let mut v134 = v134.into_context_iter();
                                            while let Some(v135) = v134.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v138,
                                                    args: ref v139,
                                                } = &v135.1
                                                {
                                                    if let &Opcode::Bxor = v138 {
                                                        if v2.0 == v135.0 {
                                                            let v140 =
                                                                C::unpack_value_array_2(ctx, v139);
                                                            let v167 = constructor_bxor(
                                                                ctx, v2.0, v140.0, v140.1,
                                                            );
                                                            let v168 = constructor_bxor(
                                                                ctx, v2.0, v131.1, v7.1,
                                                            );
                                                            let v169 = constructor_bxor(
                                                                ctx, v2.0, v167, v168,
                                                            );
                                                            let v170 = C::subsume(ctx, v169);
                                                            // Rule at src/opts/arithmetic.isle line 151.
                                                            returns.extend(Some(v170));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    if let &Opcode::Bnot = v35 {
                                        if v7.1 == v36 {
                                            let v43 = C::fits_in_64(ctx, v2.0);
                                            if let Some(v44) = v43 {
                                                let v45 = C::ty_int(ctx, v44);
                                                if let Some(v46) = v45 {
                                                    if v19.0 == v46 {
                                                        let v171 = C::ty_mask(ctx, v46);
                                                        let v172 = C::imm64(ctx, v171);
                                                        let v173 =
                                                            constructor_iconst(ctx, v46, v172);
                                                        let v174 = C::subsume(ctx, v173);
                                                        // Rule at src/opts/bitops.isle line 33.
                                                        returns.extend(Some(v174));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v51 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 20.
                                                returns.extend(Some(v51));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let v561 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 112.
                                            returns.extend(Some(v561));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v739 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 20.
                                        returns.extend(Some(v739));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v48 = C::imm64(ctx, 0x0);
                                    let v49 = constructor_iconst(ctx, v46, v48);
                                    let v50 = C::subsume(ctx, v49);
                                    // Rule at src/opts/bitops.isle line 26.
                                    returns.extend(Some(v50));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iconcat = v111 {
                                        let v113 = C::unpack_value_array_2(ctx, v112);
                                        let v827 = constructor_rotl(ctx, v2.0, v7.0, v113.0);
                                        // Rule at src/opts/shifts.isle line 146.
                                        returns.extend(Some(v827));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Ireduce => {
                                            let v815 = C::value_type(ctx, v38);
                                            let v816 = C::fits_in_64(ctx, v815);
                                            if let Some(v817) = v816 {
                                                let v822 = constructor_rotl(ctx, v2.0, v7.0, v38);
                                                // Rule at src/opts/shifts.isle line 130.
                                                returns.extend(Some(v822));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v822 = constructor_rotl(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 131.
                                            returns.extend(Some(v822));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v822 = constructor_rotl(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 132.
                                            returns.extend(Some(v822));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v129,
                                                args: ref v130,
                                            } = &v19.1
                                            {
                                                match v129 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let v842 = constructor_iadd_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v843 = constructor_rotl(
                                                                ctx, v2.0, v131.0, v842,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 243.
                                                            returns.extend(Some(v843));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let v845 = constructor_isub_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v847 = constructor_rotr(
                                                                ctx, v2.0, v131.0, v845,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 250.
                                                            returns.extend(Some(v847));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 20.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v829 = C::u64_and(ctx, v16, v197);
                                        let v859 = C::u64_eq(ctx, v16, v829);
                                        if v859 == false {
                                            let v860 = C::imm64(ctx, v829);
                                            let v861 = constructor_iconst(ctx, v11.0, v860);
                                            let v866 = constructor_rotl(ctx, v2.0, v7.0, v861);
                                            // Rule at src/opts/shifts.isle line 308.
                                            returns.extend(Some(v866));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    match v129 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                let v848 = C::value_type(ctx, v131.1);
                                                let v849 = C::value_type(ctx, v7.1);
                                                if v848 == v849 {
                                                    let v842 =
                                                        constructor_iadd_uextend(ctx, v131.1, v7.1);
                                                    let v843 =
                                                        constructor_rotl(ctx, v2.0, v131.0, v842);
                                                    // Rule at src/opts/shifts.isle line 264.
                                                    returns.extend(Some(v843));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v182 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v131.1, &mut v182);
                                                let mut v182 = v182.into_context_iter();
                                                while let Some(v183) = v182.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v186,
                                                        imm: v187,
                                                    } = &v183.1
                                                    {
                                                        if let &Opcode::Iconst = v186 {
                                                            let v842 = constructor_iadd_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v843 = constructor_rotl(
                                                                ctx, v2.0, v131.0, v842,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 242.
                                                            returns.extend(Some(v843));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                if v7.1 == v131.1 {
                                                    let v841 = C::subsume(ctx, v131.0);
                                                    // Rule at src/opts/shifts.isle line 207.
                                                    returns.extend(Some(v841));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v848 = C::value_type(ctx, v131.1);
                                                let v849 = C::value_type(ctx, v7.1);
                                                if v848 == v849 {
                                                    let v845 =
                                                        constructor_isub_uextend(ctx, v131.1, v7.1);
                                                    let v847 =
                                                        constructor_rotr(ctx, v2.0, v131.0, v845);
                                                    // Rule at src/opts/shifts.isle line 269.
                                                    returns.extend(Some(v847));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v182 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v131.1, &mut v182);
                                                let mut v182 = v182.into_context_iter();
                                                while let Some(v183) = v182.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v186,
                                                        imm: v187,
                                                    } = &v183.1
                                                    {
                                                        if let &Opcode::Iconst = v186 {
                                                            let v845 = constructor_isub_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v847 = constructor_rotr(
                                                                ctx, v2.0, v131.0, v845,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 249.
                                                            returns.extend(Some(v847));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    if let &Opcode::Splat = v35 {
                                        if v2.0 == v19.0 {
                                            let v831 = C::lane_type(ctx, v2.0);
                                            let v905 = constructor_rotl(ctx, v831, v36, v7.1);
                                            let v906 = constructor_splat(ctx, v2.0, v905);
                                            // Rule at src/opts/vector.isle line 68.
                                            returns.extend(Some(v906));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iconcat = v111 {
                                        let v113 = C::unpack_value_array_2(ctx, v112);
                                        let v826 = constructor_rotr(ctx, v2.0, v7.0, v113.0);
                                        // Rule at src/opts/shifts.isle line 145.
                                        returns.extend(Some(v826));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Ireduce => {
                                            let v815 = C::value_type(ctx, v38);
                                            let v816 = C::fits_in_64(ctx, v815);
                                            if let Some(v817) = v816 {
                                                let v821 = constructor_rotr(ctx, v2.0, v7.0, v38);
                                                // Rule at src/opts/shifts.isle line 127.
                                                returns.extend(Some(v821));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v821 = constructor_rotr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 128.
                                            returns.extend(Some(v821));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v821 = constructor_rotr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 129.
                                            returns.extend(Some(v821));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v129,
                                                args: ref v130,
                                            } = &v19.1
                                            {
                                                match v129 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let v845 = constructor_isub_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v846 = constructor_rotl(
                                                                ctx, v2.0, v131.0, v845,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 248.
                                                            returns.extend(Some(v846));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let v842 = constructor_iadd_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v844 = constructor_rotr(
                                                                ctx, v2.0, v131.0, v842,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 245.
                                                            returns.extend(Some(v844));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 16.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v829 = C::u64_and(ctx, v16, v197);
                                        let v859 = C::u64_eq(ctx, v16, v829);
                                        if v859 == false {
                                            let v860 = C::imm64(ctx, v829);
                                            let v861 = constructor_iconst(ctx, v11.0, v860);
                                            let v865 = constructor_rotr(ctx, v2.0, v7.0, v861);
                                            // Rule at src/opts/shifts.isle line 305.
                                            returns.extend(Some(v865));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v129,
                                    args: ref v130,
                                } => {
                                    match v129 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                if v7.1 == v131.1 {
                                                    let v841 = C::subsume(ctx, v131.0);
                                                    // Rule at src/opts/shifts.isle line 208.
                                                    returns.extend(Some(v841));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v848 = C::value_type(ctx, v131.1);
                                                let v849 = C::value_type(ctx, v7.1);
                                                if v848 == v849 {
                                                    let v845 =
                                                        constructor_isub_uextend(ctx, v131.1, v7.1);
                                                    let v846 =
                                                        constructor_rotl(ctx, v2.0, v131.0, v845);
                                                    // Rule at src/opts/shifts.isle line 267.
                                                    returns.extend(Some(v846));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v182 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v131.1, &mut v182);
                                                let mut v182 = v182.into_context_iter();
                                                while let Some(v183) = v182.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v186,
                                                        imm: v187,
                                                    } = &v183.1
                                                    {
                                                        if let &Opcode::Iconst = v186 {
                                                            let v845 = constructor_isub_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v846 = constructor_rotl(
                                                                ctx, v2.0, v131.0, v845,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 247.
                                                            returns.extend(Some(v846));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v131 = C::unpack_value_array_2(ctx, v130);
                                                let v848 = C::value_type(ctx, v131.1);
                                                let v849 = C::value_type(ctx, v7.1);
                                                if v848 == v849 {
                                                    let v842 =
                                                        constructor_iadd_uextend(ctx, v131.1, v7.1);
                                                    let v844 =
                                                        constructor_rotr(ctx, v2.0, v131.0, v842);
                                                    // Rule at src/opts/shifts.isle line 262.
                                                    returns.extend(Some(v844));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v182 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v131.1, &mut v182);
                                                let mut v182 = v182.into_context_iter();
                                                while let Some(v183) = v182.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v186,
                                                        imm: v187,
                                                    } = &v183.1
                                                    {
                                                        if let &Opcode::Iconst = v186 {
                                                            let v842 = constructor_iadd_uextend(
                                                                ctx, v131.1, v7.1,
                                                            );
                                                            let v844 = constructor_rotr(
                                                                ctx, v2.0, v131.0, v842,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 244.
                                                            returns.extend(Some(v844));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v35,
                                    arg: v36,
                                } => {
                                    if let &Opcode::Splat = v35 {
                                        if v2.0 == v19.0 {
                                            let v831 = C::lane_type(ctx, v2.0);
                                            let v907 = constructor_rotr(ctx, v831, v36, v7.1);
                                            let v908 = constructor_splat(ctx, v2.0, v907);
                                            // Rule at src/opts/vector.isle line 71.
                                            returns.extend(Some(v908));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iconcat = v111 {
                                        let v113 = C::unpack_value_array_2(ctx, v112);
                                        let v823 = constructor_ishl(ctx, v2.0, v7.0, v113.0);
                                        // Rule at src/opts/shifts.isle line 142.
                                        returns.extend(Some(v823));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Ireduce => {
                                            let v815 = C::value_type(ctx, v38);
                                            let v816 = C::fits_in_64(ctx, v815);
                                            if let Some(v817) = v816 {
                                                let v818 = constructor_ishl(ctx, v2.0, v7.0, v38);
                                                // Rule at src/opts/shifts.isle line 118.
                                                returns.extend(Some(v818));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v818 = constructor_ishl(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 119.
                                            returns.extend(Some(v818));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v818 = constructor_ishl(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 120.
                                            returns.extend(Some(v818));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v129,
                                                    args: ref v130,
                                                } => {
                                                    match v129 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            let v188 = C::u64_from_imm64(ctx, v187);
                                                                            let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v828 = C::u64_and(ctx, v188, v197);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v829 = C::u64_and(ctx, v16, v197);
                                                                            let v830 = C::u64_add(ctx, v828, v829);
                                                                            let v831 = C::lane_type(ctx, v2.0);
                                                                            let v832 = C::ty_bits_u64(ctx, v831);
                                                                            let v833 = C::u64_lt(ctx, v830, v832);
                                                                            if v833 == true {
                                                                                let v834 = constructor_iconst_u64(ctx, v183.0, v830);
                                                                                let v835 = constructor_ishl(ctx, v2.0, v131.0, v834);
                                                                                // Rule at src/opts/shifts.isle line 155.
                                                                                returns.extend(Some(v835));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v797 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v838 = C::u64_le(ctx, v797, v830);
                                                                            if v838 == true {
                                                                                let v839 = constructor_iconst_u64(ctx, v2.0, 0x0);
                                                                                let v840 = C::subsume(ctx, v839);
                                                                                // Rule at src/opts/shifts.isle line 187.
                                                                                returns.extend(Some(v840));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.0, &mut v134,
                                                                );
                                                                let mut v134 =
                                                                    v134.into_context_iter();
                                                                while let Some(v135) =
                                                                    v134.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v570,
                                                                        imm: v571,
                                                                    } = &v135.1 {
                                                                        if let &Opcode::Iconst = v570 {
                                                                            let v625 = constructor_ishl(ctx, v2.0, v131.0, v7.1);
                                                                            let v626 = constructor_ishl(ctx, v2.0, v625, v131.1);
                                                                            // Rule at src/opts/cprop.isle line 205.
                                                                            returns.extend(Some(v626));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v43 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v44) = v43 {
                                                                if v19.0 == v44 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                if v15 == v187 {
                                                                                    let v789 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v790 = C::imm64_shl(ctx, v44, v789, v187);
                                                                                    let v791 = constructor_iconst(ctx, v44, v790);
                                                                                    let v792 = constructor_band(ctx, v44, v131.0, v791);
                                                                                    // Rule at src/opts/shifts.isle line 27.
                                                                                    returns.extend(Some(v792));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v43 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v44) = v43 {
                                                                if v19.0 == v44 {
                                                                    let v131 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v130,
                                                                        );
                                                                    let mut v182 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v131.1, &mut v182,
                                                                    );
                                                                    let mut v182 =
                                                                        v182.into_context_iter();
                                                                    while let Some(v183) =
                                                                        v182.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v186,
                                                                            imm: v187,
                                                                        } = &v183.1 {
                                                                            if let &Opcode::Iconst = v186 {
                                                                                if v15 == v187 {
                                                                                    let v789 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v790 = C::imm64_shl(ctx, v44, v789, v187);
                                                                                    let v791 = constructor_iconst(ctx, v44, v790);
                                                                                    let v792 = constructor_band(ctx, v44, v131.0, v791);
                                                                                    // Rule at src/opts/shifts.isle line 32.
                                                                                    returns.extend(Some(v792));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v43 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v44) = v43 {
                                                            if v19.0 == v44 {
                                                                let v523 = C::imm64_shl(
                                                                    ctx, v44, v23, v15,
                                                                );
                                                                let v524 = constructor_iconst(
                                                                    ctx, v44, v523,
                                                                );
                                                                let v525 = C::subsume(ctx, v524);
                                                                // Rule at src/opts/cprop.isle line 58.
                                                                returns.extend(Some(v525));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v829 = C::u64_and(ctx, v16, v197);
                                        let v859 = C::u64_eq(ctx, v16, v829);
                                        if v859 == false {
                                            let v860 = C::imm64(ctx, v829);
                                            let v861 = constructor_iconst(ctx, v11.0, v860);
                                            let v862 = constructor_ishl(ctx, v2.0, v7.0, v861);
                                            // Rule at src/opts/shifts.isle line 296.
                                            returns.extend(Some(v862));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v35,
                                arg: v36,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v35 {
                                    if v2.0 == v19.0 {
                                        let v831 = C::lane_type(ctx, v2.0);
                                        let v909 = constructor_ishl(ctx, v831, v36, v7.1);
                                        let v910 = constructor_splat(ctx, v2.0, v909);
                                        // Rule at src/opts/vector.isle line 74.
                                        returns.extend(Some(v910));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iconcat = v111 {
                                        let v113 = C::unpack_value_array_2(ctx, v112);
                                        let v824 = constructor_ushr(ctx, v2.0, v7.0, v113.0);
                                        // Rule at src/opts/shifts.isle line 143.
                                        returns.extend(Some(v824));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Ireduce => {
                                            let v815 = C::value_type(ctx, v38);
                                            let v816 = C::fits_in_64(ctx, v815);
                                            if let Some(v817) = v816 {
                                                let v819 = constructor_ushr(ctx, v2.0, v7.0, v38);
                                                // Rule at src/opts/shifts.isle line 121.
                                                returns.extend(Some(v819));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v819 = constructor_ushr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 122.
                                            returns.extend(Some(v819));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v819 = constructor_ushr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 123.
                                            returns.extend(Some(v819));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v129,
                                                    args: ref v130,
                                                } => {
                                                    match v129 {
                                                        &Opcode::Ishl => {
                                                            let v131 =
                                                                C::unpack_value_array_2(ctx, v130);
                                                            let mut v182 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v131.1, &mut v182,
                                                            );
                                                            let mut v182 = v182.into_context_iter();
                                                            while let Some(v183) = v182.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v186,
                                                                    imm: v187,
                                                                } = &v183.1 {
                                                                    if let &Opcode::Iconst = v186 {
                                                                        if v15 == v187 {
                                                                            let v43 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v44) = v43 {
                                                                                let v45 = C::ty_int(ctx, v44);
                                                                                if let Some(v46) = v45 {
                                                                                    if v19.0 == v46 {
                                                                                        let v171 = C::ty_mask(ctx, v46);
                                                                                        let v172 = C::imm64(ctx, v171);
                                                                                        let v793 = C::imm64_ushr(ctx, v46, v172, v187);
                                                                                        let v794 = constructor_iconst(ctx, v46, v793);
                                                                                        let v795 = constructor_band(ctx, v46, v131.0, v794);
                                                                                        // Rule at src/opts/shifts.isle line 41.
                                                                                        returns.extend(Some(v795));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v188 = C::u64_from_imm64(ctx, v187);
                                                                            let v804 = C::u64_is_zero(ctx, v188);
                                                                            if v804 == false {
                                                                                let v805 = C::ty_bits(ctx, v2.0);
                                                                                let v806 = C::u8_as_u64(ctx, v805);
                                                                                let v807 = C::u64_sub(ctx, v806, v188);
                                                                                let v808 = constructor_shift_amt_to_type(ctx, v807);
                                                                                if let Some(v809) = v808 {
                                                                                    if v2.0 == v19.0 {
                                                                                        let v810 = constructor_ireduce(ctx, v809, v131.0);
                                                                                        let v812 = constructor_uextend(ctx, v2.0, v810);
                                                                                        // Rule at src/opts/shifts.isle line 91.
                                                                                        returns.extend(Some(v812));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            let v188 = C::u64_from_imm64(ctx, v187);
                                                                            let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v828 = C::u64_and(ctx, v188, v197);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v829 = C::u64_and(ctx, v16, v197);
                                                                            let v830 = C::u64_add(ctx, v828, v829);
                                                                            let v831 = C::lane_type(ctx, v2.0);
                                                                            let v832 = C::ty_bits_u64(ctx, v831);
                                                                            let v833 = C::u64_lt(ctx, v830, v832);
                                                                            if v833 == true {
                                                                                let v834 = constructor_iconst_u64(ctx, v183.0, v830);
                                                                                let v836 = constructor_ushr(ctx, v2.0, v131.0, v834);
                                                                                // Rule at src/opts/shifts.isle line 164.
                                                                                returns.extend(Some(v836));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v797 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v838 = C::u64_le(ctx, v797, v830);
                                                                            if v838 == true {
                                                                                let v839 = constructor_iconst_u64(ctx, v2.0, 0x0);
                                                                                let v840 = C::subsume(ctx, v839);
                                                                                // Rule at src/opts/shifts.isle line 196.
                                                                                returns.extend(Some(v840));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.0, &mut v134,
                                                                );
                                                                let mut v134 =
                                                                    v134.into_context_iter();
                                                                while let Some(v135) =
                                                                    v134.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v570,
                                                                        imm: v571,
                                                                    } = &v135.1 {
                                                                        if let &Opcode::Iconst = v570 {
                                                                            let v627 = constructor_ushr(ctx, v2.0, v131.0, v7.1);
                                                                            let v628 = constructor_ushr(ctx, v2.0, v627, v131.1);
                                                                            // Rule at src/opts/cprop.isle line 207.
                                                                            returns.extend(Some(v628));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v43 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v44) = v43 {
                                                            if v19.0 == v44 {
                                                                let v526 = C::imm64_ushr(
                                                                    ctx, v44, v23, v15,
                                                                );
                                                                let v527 = constructor_iconst(
                                                                    ctx, v44, v526,
                                                                );
                                                                let v528 = C::subsume(ctx, v527);
                                                                // Rule at src/opts/cprop.isle line 63.
                                                                returns.extend(Some(v528));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v829 = C::u64_and(ctx, v16, v197);
                                        let v859 = C::u64_eq(ctx, v16, v829);
                                        if v859 == false {
                                            let v860 = C::imm64(ctx, v829);
                                            let v861 = constructor_iconst(ctx, v11.0, v860);
                                            let v863 = constructor_ushr(ctx, v2.0, v7.0, v861);
                                            // Rule at src/opts/shifts.isle line 299.
                                            returns.extend(Some(v863));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v35,
                                arg: v36,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v35 {
                                    if v2.0 == v19.0 {
                                        let v831 = C::lane_type(ctx, v2.0);
                                        let v911 = constructor_ushr(ctx, v831, v36, v7.1);
                                        let v912 = constructor_splat(ctx, v2.0, v911);
                                        // Rule at src/opts/vector.isle line 77.
                                        returns.extend(Some(v912));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v111,
                                    args: ref v112,
                                } => {
                                    if let &Opcode::Iconcat = v111 {
                                        let v113 = C::unpack_value_array_2(ctx, v112);
                                        let v825 = constructor_sshr(ctx, v2.0, v7.0, v113.0);
                                        // Rule at src/opts/shifts.isle line 144.
                                        returns.extend(Some(v825));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v37,
                                    arg: v38,
                                } => {
                                    match v37 {
                                        &Opcode::Ireduce => {
                                            let v815 = C::value_type(ctx, v38);
                                            let v816 = C::fits_in_64(ctx, v815);
                                            if let Some(v817) = v816 {
                                                let v820 = constructor_sshr(ctx, v2.0, v7.0, v38);
                                                // Rule at src/opts/shifts.isle line 124.
                                                returns.extend(Some(v820));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v820 = constructor_sshr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 125.
                                            returns.extend(Some(v820));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v820 = constructor_sshr(ctx, v2.0, v7.0, v38);
                                            // Rule at src/opts/shifts.isle line 126.
                                            returns.extend(Some(v820));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v129,
                                                    args: ref v130,
                                                } => {
                                                    match v129 {
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v197 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v198 = C::u64_eq(ctx, v16, v197);
                                                            if v198 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v131 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v130,
                                                                            );
                                                                        let mut v134 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v131.0, &mut v134,
                                                                        );
                                                                        let mut v134 = v134
                                                                            .into_context_iter();
                                                                        while let Some(v135) =
                                                                            v134.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v200,
                                                                                arg: v201,
                                                                            } = &v135.1 {
                                                                                if let &Opcode::Ineg = v200 {
                                                                                    if v2.0 == v135.0 {
                                                                                        if v131.1 == v201 {
                                                                                            let v202 = constructor_bmask(ctx, v2.0, v201);
                                                                                            // Rule at src/opts/bitops.isle line 104.
                                                                                            returns.extend(Some(v202));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v182 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v131.1, &mut v182,
                                                                        );
                                                                        let mut v182 = v182
                                                                            .into_context_iter();
                                                                        while let Some(v183) =
                                                                            v182.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v195,
                                                                                arg: v196,
                                                                            } = &v183.1 {
                                                                                if let &Opcode::Ineg = v195 {
                                                                                    if v131.0 == v196 {
                                                                                        if v2.0 == v183.0 {
                                                                                            let v199 = constructor_bmask(ctx, v2.0, v131.0);
                                                                                            // Rule at src/opts/bitops.isle line 100.
                                                                                            returns.extend(Some(v199));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            if v15 == v187 {
                                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v131.0, &mut v134);
                                                                                let mut v134 = v134.into_context_iter();
                                                                                while let Some(v135) = v134.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v200,
                                                                                        arg: v201,
                                                                                    } = &v135.1 {
                                                                                        match v200 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v135.0 {
                                                                                                    let v188 = C::u64_from_imm64(ctx, v187);
                                                                                                    let v797 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v796 = C::value_type(ctx, v201);
                                                                                                    let v798 = C::ty_bits_u64(ctx, v796);
                                                                                                    let v799 = C::u64_sub(ctx, v797, v798);
                                                                                                    let v800 = C::u64_eq(ctx, v188, v799);
                                                                                                    if v800 == true {
                                                                                                        let v801 = constructor_sextend(ctx, v2.0, v201);
                                                                                                        // Rule at src/opts/shifts.isle line 50.
                                                                                                        returns.extend(Some(v801));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                    let v802 = C::u64_lt(ctx, v188, v799);
                                                                                                    if v802 == true {
                                                                                                        // Rule at src/opts/shifts.isle line 62.
                                                                                                        returns.extend(Some(v131.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                                let v797 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v796 = C::value_type(ctx, v201);
                                                                                                let v798 = C::ty_bits_u64(ctx, v796);
                                                                                                let v799 = C::u64_sub(ctx, v797, v798);
                                                                                                let v803 = C::u64_le(ctx, v188, v799);
                                                                                                if v803 == true {
                                                                                                    if v2.0 == v135.0 {
                                                                                                        // Rule at src/opts/shifts.isle line 73.
                                                                                                        returns.extend(Some(v131.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                                let v188 = C::u64_from_imm64(ctx, v187);
                                                                                let v804 = C::u64_is_zero(ctx, v188);
                                                                                if v804 == false {
                                                                                    let v805 = C::ty_bits(ctx, v2.0);
                                                                                    let v806 = C::u8_as_u64(ctx, v805);
                                                                                    let v807 = C::u64_sub(ctx, v806, v188);
                                                                                    let v808 = constructor_shift_amt_to_type(ctx, v807);
                                                                                    if let Some(v809) = v808 {
                                                                                        let v810 = constructor_ireduce(ctx, v809, v131.0);
                                                                                        let v811 = constructor_sextend(ctx, v2.0, v810);
                                                                                        // Rule at src/opts/shifts.isle line 87.
                                                                                        returns.extend(Some(v811));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v131 = C::unpack_value_array_2(
                                                                    ctx, v130,
                                                                );
                                                                let mut v134 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.0, &mut v134,
                                                                );
                                                                let mut v134 =
                                                                    v134.into_context_iter();
                                                                while let Some(v135) =
                                                                    v134.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v570,
                                                                        imm: v571,
                                                                    } = &v135.1 {
                                                                        if let &Opcode::Iconst = v570 {
                                                                            let v629 = constructor_sshr(ctx, v2.0, v131.0, v7.1);
                                                                            let v630 = constructor_sshr(ctx, v2.0, v629, v131.1);
                                                                            // Rule at src/opts/cprop.isle line 209.
                                                                            returns.extend(Some(v630));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v182 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v131.1, &mut v182,
                                                                );
                                                                let mut v182 =
                                                                    v182.into_context_iter();
                                                                while let Some(v183) =
                                                                    v182.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v186,
                                                                        imm: v187,
                                                                    } = &v183.1 {
                                                                        if let &Opcode::Iconst = v186 {
                                                                            let v188 = C::u64_from_imm64(ctx, v187);
                                                                            let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v828 = C::u64_and(ctx, v188, v197);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v829 = C::u64_and(ctx, v16, v197);
                                                                            let v830 = C::u64_add(ctx, v828, v829);
                                                                            let v831 = C::lane_type(ctx, v2.0);
                                                                            let v832 = C::ty_bits_u64(ctx, v831);
                                                                            let v833 = C::u64_lt(ctx, v830, v832);
                                                                            if v833 == true {
                                                                                let v834 = constructor_iconst_u64(ctx, v183.0, v830);
                                                                                let v837 = constructor_sshr(ctx, v2.0, v131.0, v834);
                                                                                // Rule at src/opts/shifts.isle line 173.
                                                                                returns.extend(Some(v837));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v43 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v44) = v43 {
                                                            if v19.0 == v44 {
                                                                let v529 = C::imm64_sshr(
                                                                    ctx, v44, v23, v15,
                                                                );
                                                                let v530 = constructor_iconst(
                                                                    ctx, v44, v529,
                                                                );
                                                                let v531 = C::subsume(ctx, v530);
                                                                // Rule at src/opts/cprop.isle line 68.
                                                                returns.extend(Some(v531));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v197 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v829 = C::u64_and(ctx, v16, v197);
                                        let v859 = C::u64_eq(ctx, v16, v829);
                                        if v859 == false {
                                            let v860 = C::imm64(ctx, v829);
                                            let v861 = constructor_iconst(ctx, v11.0, v860);
                                            let v864 = constructor_sshr(ctx, v2.0, v7.0, v861);
                                            // Rule at src/opts/shifts.isle line 302.
                                            returns.extend(Some(v864));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v35,
                                arg: v36,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v35 {
                                    if v2.0 == v19.0 {
                                        let v831 = C::lane_type(ctx, v2.0);
                                        let v913 = constructor_sshr(ctx, v831, v36, v7.1);
                                        let v914 = constructor_splat(ctx, v2.0, v913);
                                        // Rule at src/opts/vector.isle line 80.
                                        returns.extend(Some(v914));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v37,
                                arg: v38,
                            } = &v11.1
                            {
                                if let &Opcode::Fneg = v37 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v35,
                                                arg: v36,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Fneg = v35 {
                                                    if v2.0 == v19.0 {
                                                        let v110 =
                                                            constructor_fmul(ctx, v2.0, v36, v38);
                                                        // Rule at src/opts/arithmetic.isle line 113.
                                                        returns.extend(Some(v110));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v209,
                args: ref v210,
                cond: ref v211,
            } => {
                if let &Opcode::Icmp = v209 {
                    match v211 {
                        &IntCC::Equal => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    if v212.0 == v212.1 {
                                        let v661 = C::imm64(ctx, 0x1);
                                        let v664 = constructor_iconst(ctx, v46, v661);
                                        // Rule at src/opts/icmp.isle line 5.
                                        returns.extend(Some(v664));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        if v221 == 0x0 {
                                            let mut v546 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v212.0, &mut v546);
                                            let mut v546 = v546.into_context_iter();
                                            while let Some(v547) = v546.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v656,
                                                    arg: v657,
                                                } = &v547.1
                                                {
                                                    if let &Opcode::Uextend = v656 {
                                                        let mut v665 =
                                                            C::inst_data_etor_returns::default();
                                                        C::inst_data_etor(ctx, v657, &mut v665);
                                                        let mut v665 = v665.into_context_iter();
                                                        while let Some(v666) = v665.next(ctx) {
                                                            if let &InstructionData::IntCompare {
                                                                opcode: ref v669,
                                                                args: ref v670,
                                                                cond: ref v671,
                                                            } = &v666.1
                                                            {
                                                                if let &Opcode::Icmp = v669 {
                                                                    if v2.0 == v666.0 {
                                                                        let v676 =
                                                                            &C::intcc_complement(
                                                                                ctx, v671,
                                                                            );
                                                                        let v672 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v670,
                                                                            );
                                                                        let v677 = constructor_icmp(
                                                                            ctx, v2.0, v676,
                                                                            v672.0, v672.1,
                                                                        );
                                                                        let v678 =
                                                                            C::subsume(ctx, v677);
                                                                        // Rule at src/opts/icmp.isle line 22.
                                                                        returns.extend(Some(v678));
                                                                        if returns.len()
                                                                            >= MAX_ISLE_RETURNS
                                                                        {
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        if v221 == 0x0 {
                                            let mut v222 =
                                                ContextIterWrapper::<ConstructorVec<_>, _>::default(
                                                );
                                            constructor_truthy(ctx, v212.0, &mut v222);
                                            let mut v222 = v222.into_context_iter();
                                            while let Some(v223) = v222.next(ctx) {
                                                let v224 = C::value_type(ctx, v223);
                                                let v225 =
                                                    C::ty_int_ref_scalar_64_extract(ctx, v224);
                                                if let Some(v226) = v225 {
                                                    let v48 = C::imm64(ctx, 0x0);
                                                    let v227 = constructor_iconst(ctx, v226, v48);
                                                    let v228 =
                                                        constructor_ne(ctx, v2.0, v223, v227);
                                                    // Rule at src/opts/bitops.isle line 130.
                                                    returns.extend(Some(v228));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let mut v546 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v212.0, &mut v546);
                                            let mut v546 = v546.into_context_iter();
                                            while let Some(v547) = v546.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v656,
                                                    arg: v657,
                                                } = &v547.1
                                                {
                                                    if let &Opcode::Uextend = v656 {
                                                        let mut v665 =
                                                            C::inst_data_etor_returns::default();
                                                        C::inst_data_etor(ctx, v657, &mut v665);
                                                        let mut v665 = v665.into_context_iter();
                                                        while let Some(v666) = v665.next(ctx) {
                                                            if let &InstructionData::IntCompare {
                                                                opcode: ref v669,
                                                                args: ref v670,
                                                                cond: ref v671,
                                                            } = &v666.1
                                                            {
                                                                if let &Opcode::Icmp = v669 {
                                                                    if v2.0 == v666.0 {
                                                                        let v675 =
                                                                            C::subsume(ctx, v657);
                                                                        // Rule at src/opts/icmp.isle line 17.
                                                                        returns.extend(Some(v675));
                                                                        if returns.len()
                                                                            >= MAX_ISLE_RETURNS
                                                                        {
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    if v212.0 == v212.1 {
                                        let v48 = C::imm64(ctx, 0x0);
                                        let v49 = constructor_iconst(ctx, v46, v48);
                                        // Rule at src/opts/icmp.isle line 6.
                                        returns.extend(Some(v49));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                let v713 = C::ty_smin(ctx, v216.0);
                                                let v714 = C::u64_eq(ctx, v221, v713);
                                                if v714 == true {
                                                    let v709 =
                                                        constructor_ne(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 98.
                                                    returns.extend(Some(v709));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v715 = C::ty_smax(ctx, v216.0);
                                                let v716 = C::u64_eq(ctx, v221, v715);
                                                if v716 == true {
                                                    let v48 = C::imm64(ctx, 0x0);
                                                    let v49 = constructor_iconst(ctx, v46, v48);
                                                    let v50 = C::subsume(ctx, v49);
                                                    // Rule at src/opts/icmp.isle line 118.
                                                    returns.extend(Some(v50));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v48 = C::imm64(ctx, 0x0);
                                        let v49 = constructor_iconst(ctx, v46, v48);
                                        // Rule at src/opts/icmp.isle line 9.
                                        returns.extend(Some(v49));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v736 = C::i64_sextend_imm64(ctx, v216.0, v220);
                                        if v736 == -0x1 {
                                            let v48 = C::imm64(ctx, 0x0);
                                            let v731 = constructor_iconst(ctx, v216.0, v48);
                                            let v737 = constructor_sge(ctx, v2.0, v212.0, v731);
                                            // Rule at src/opts/icmp.isle line 150.
                                            returns.extend(Some(v737));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            let v45 = C::ty_int(ctx, v44);
                                            if let Some(v46) = v45 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                let v713 = C::ty_smin(ctx, v216.0);
                                                let v714 = C::u64_eq(ctx, v221, v713);
                                                if v714 == true {
                                                    let v661 = C::imm64(ctx, 0x1);
                                                    let v664 = constructor_iconst(ctx, v46, v661);
                                                    let v710 = C::subsume(ctx, v664);
                                                    // Rule at src/opts/icmp.isle line 103.
                                                    returns.extend(Some(v710));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v715 = C::ty_smax(ctx, v216.0);
                                                let v716 = C::u64_eq(ctx, v221, v715);
                                                if v716 == true {
                                                    let v708 =
                                                        constructor_eq(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 123.
                                                    returns.extend(Some(v708));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        match v221 {
                                            0x0 => {
                                                let mut v546 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v212.0, &mut v546);
                                                let mut v546 = v546.into_context_iter();
                                                while let Some(v547) = v546.next(ctx) {
                                                    if v547.0 == I64 {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v656,
                                                            arg: v657,
                                                        } = &v547.1
                                                        {
                                                            if let &Opcode::Uextend = v656 {
                                                                let v658 = C::value_type(ctx, v657);
                                                                if v658 == I32 {
                                                                    let v661 = C::imm64(ctx, 0x1);
                                                                    let v662 = constructor_iconst(
                                                                        ctx, v2.0, v661,
                                                                    );
                                                                    // Rule at src/opts/extends.isle line 25.
                                                                    returns.extend(Some(v662));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v48 = C::imm64(ctx, 0x0);
                                                let v731 = constructor_iconst(ctx, v216.0, v48);
                                                let v734 = constructor_sgt(ctx, v2.0, v212.0, v731);
                                                // Rule at src/opts/icmp.isle line 144.
                                                returns.extend(Some(v734));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    if v212.0 == v212.1 {
                                        let v661 = C::imm64(ctx, 0x1);
                                        let v664 = constructor_iconst(ctx, v46, v661);
                                        // Rule at src/opts/icmp.isle line 10.
                                        returns.extend(Some(v664));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            let v45 = C::ty_int(ctx, v44);
                                            if let Some(v46) = v45 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                let v713 = C::ty_smin(ctx, v216.0);
                                                let v714 = C::u64_eq(ctx, v221, v713);
                                                if v714 == true {
                                                    let v48 = C::imm64(ctx, 0x0);
                                                    let v49 = constructor_iconst(ctx, v46, v48);
                                                    let v50 = C::subsume(ctx, v49);
                                                    // Rule at src/opts/icmp.isle line 88.
                                                    returns.extend(Some(v50));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v715 = C::ty_smax(ctx, v216.0);
                                                let v716 = C::u64_eq(ctx, v221, v715);
                                                if v716 == true {
                                                    let v709 =
                                                        constructor_ne(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 108.
                                                    returns.extend(Some(v709));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        match v221 {
                                            0x0 => {
                                                let mut v546 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v212.0, &mut v546);
                                                let mut v546 = v546.into_context_iter();
                                                while let Some(v547) = v546.next(ctx) {
                                                    if v547.0 == I64 {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v656,
                                                            arg: v657,
                                                        } = &v547.1
                                                        {
                                                            if let &Opcode::Uextend = v656 {
                                                                let v658 = C::value_type(ctx, v657);
                                                                if v658 == I32 {
                                                                    let v48 = C::imm64(ctx, 0x0);
                                                                    let v659 = constructor_iconst(
                                                                        ctx, v2.0, v48,
                                                                    );
                                                                    // Rule at src/opts/extends.isle line 20.
                                                                    returns.extend(Some(v659));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v48 = C::imm64(ctx, 0x0);
                                                let v731 = constructor_iconst(ctx, v216.0, v48);
                                                let v735 = constructor_sle(ctx, v2.0, v212.0, v731);
                                                // Rule at src/opts/icmp.isle line 147.
                                                returns.extend(Some(v735));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    if v212.0 == v212.1 {
                                        let v48 = C::imm64(ctx, 0x0);
                                        let v49 = constructor_iconst(ctx, v46, v48);
                                        // Rule at src/opts/icmp.isle line 13.
                                        returns.extend(Some(v49));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                let v713 = C::ty_smin(ctx, v216.0);
                                                let v714 = C::u64_eq(ctx, v221, v713);
                                                if v714 == true {
                                                    let v708 =
                                                        constructor_eq(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 93.
                                                    returns.extend(Some(v708));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v715 = C::ty_smax(ctx, v216.0);
                                                let v716 = C::u64_eq(ctx, v221, v715);
                                                if v716 == true {
                                                    let v661 = C::imm64(ctx, 0x1);
                                                    let v664 = constructor_iconst(ctx, v46, v661);
                                                    let v710 = C::subsume(ctx, v664);
                                                    // Rule at src/opts/icmp.isle line 113.
                                                    returns.extend(Some(v710));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v661 = C::imm64(ctx, 0x1);
                                        let v664 = constructor_iconst(ctx, v46, v661);
                                        // Rule at src/opts/icmp.isle line 14.
                                        returns.extend(Some(v664));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v736 = C::i64_sextend_imm64(ctx, v216.0, v220);
                                        if v736 == -0x1 {
                                            let v48 = C::imm64(ctx, 0x0);
                                            let v731 = constructor_iconst(ctx, v216.0, v48);
                                            let v738 = constructor_slt(ctx, v2.0, v212.0, v731);
                                            // Rule at src/opts/icmp.isle line 154.
                                            returns.extend(Some(v738));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                if v221 == 0x0 {
                                                    let v709 =
                                                        constructor_ne(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 60.
                                                    returns.extend(Some(v709));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v711 = C::ty_umax(ctx, v216.0);
                                                let v712 = C::u64_eq(ctx, v221, v711);
                                                if v712 == true {
                                                    let v48 = C::imm64(ctx, 0x0);
                                                    let v49 = constructor_iconst(ctx, v46, v48);
                                                    let v50 = C::subsume(ctx, v49);
                                                    // Rule at src/opts/icmp.isle line 78.
                                                    returns.extend(Some(v50));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v48 = C::imm64(ctx, 0x0);
                                        let v49 = constructor_iconst(ctx, v46, v48);
                                        // Rule at src/opts/icmp.isle line 7.
                                        returns.extend(Some(v49));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                if v221 == 0x0 {
                                                    let v661 = C::imm64(ctx, 0x1);
                                                    let v664 = constructor_iconst(ctx, v46, v661);
                                                    let v710 = C::subsume(ctx, v664);
                                                    // Rule at src/opts/icmp.isle line 64.
                                                    returns.extend(Some(v710));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v711 = C::ty_umax(ctx, v216.0);
                                                let v712 = C::u64_eq(ctx, v221, v711);
                                                if v712 == true {
                                                    let v708 =
                                                        constructor_eq(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 83.
                                                    returns.extend(Some(v708));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v661 = C::imm64(ctx, 0x1);
                                        let v664 = constructor_iconst(ctx, v46, v661);
                                        // Rule at src/opts/icmp.isle line 8.
                                        returns.extend(Some(v664));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        if v221 == 0x1 {
                                            let v48 = C::imm64(ctx, 0x0);
                                            let v731 = constructor_iconst(ctx, v216.0, v48);
                                            let v732 = constructor_ne(ctx, v2.0, v212.0, v731);
                                            // Rule at src/opts/icmp.isle line 138.
                                            returns.extend(Some(v732));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                if v221 == 0x0 {
                                                    let v48 = C::imm64(ctx, 0x0);
                                                    let v49 = constructor_iconst(ctx, v46, v48);
                                                    let v50 = C::subsume(ctx, v49);
                                                    // Rule at src/opts/icmp.isle line 52.
                                                    returns.extend(Some(v50));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v711 = C::ty_umax(ctx, v216.0);
                                                let v712 = C::u64_eq(ctx, v221, v711);
                                                if v712 == true {
                                                    let v709 =
                                                        constructor_ne(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 68.
                                                    returns.extend(Some(v709));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v48 = C::imm64(ctx, 0x0);
                                        let v49 = constructor_iconst(ctx, v46, v48);
                                        // Rule at src/opts/icmp.isle line 11.
                                        returns.extend(Some(v49));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            let v212 = C::unpack_value_array_2(ctx, v210);
                            let mut v215 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v212.1, &mut v215);
                            let mut v215 = v215.into_context_iter();
                            while let Some(v216) = v215.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v219,
                                    imm: v220,
                                } = &v216.1
                                {
                                    if let &Opcode::Iconst = v219 {
                                        let v221 = C::u64_from_imm64(ctx, v220);
                                        if v221 == 0x1 {
                                            let v48 = C::imm64(ctx, 0x0);
                                            let v731 = constructor_iconst(ctx, v216.0, v48);
                                            let v733 = constructor_eq(ctx, v2.0, v212.0, v731);
                                            // Rule at src/opts/icmp.isle line 141.
                                            returns.extend(Some(v733));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v43 = C::fits_in_64(ctx, v2.0);
                            if let Some(v44) = v43 {
                                let v45 = C::ty_int(ctx, v44);
                                if let Some(v46) = v45 {
                                    let v212 = C::unpack_value_array_2(ctx, v210);
                                    let mut v215 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v212.1, &mut v215);
                                    let mut v215 = v215.into_context_iter();
                                    while let Some(v216) = v215.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v219,
                                            imm: v220,
                                        } = &v216.1
                                        {
                                            if let &Opcode::Iconst = v219 {
                                                let v221 = C::u64_from_imm64(ctx, v220);
                                                if v221 == 0x0 {
                                                    let v708 =
                                                        constructor_eq(ctx, v46, v212.0, v212.1);
                                                    // Rule at src/opts/icmp.isle line 56.
                                                    returns.extend(Some(v708));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v711 = C::ty_umax(ctx, v216.0);
                                                let v712 = C::u64_eq(ctx, v221, v711);
                                                if v712 == true {
                                                    let v661 = C::imm64(ctx, 0x1);
                                                    let v664 = constructor_iconst(ctx, v46, v661);
                                                    let v710 = C::subsume(ctx, v664);
                                                    // Rule at src/opts/icmp.isle line 73.
                                                    returns.extend(Some(v710));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if v212.0 == v212.1 {
                                        let v661 = C::imm64(ctx, 0x1);
                                        let v664 = constructor_iconst(ctx, v46, v661);
                                        // Rule at src/opts/icmp.isle line 12.
                                        returns.extend(Some(v664));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v212 = C::unpack_value_array_2(ctx, v210);
                    let mut v546 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v212.0, &mut v546);
                    let mut v546 = v546.into_context_iter();
                    while let Some(v547) = v546.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v550,
                            imm: v551,
                        } = &v547.1
                        {
                            if let &Opcode::Iconst = v550 {
                                let mut v215 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v212.1, &mut v215);
                                let mut v215 = v215.into_context_iter();
                                while let Some(v216) = v215.next(ctx) {
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v219,
                                        imm: v220,
                                    } = &v216.1
                                    {
                                        if let &Opcode::Iconst = v219 {
                                            if v216.0 == v547.0 {
                                                let v552 =
                                                    C::imm64_icmp(ctx, v547.0, v211, v551, v220);
                                                let v553 = constructor_iconst(ctx, v2.0, v552);
                                                let v554 = C::subsume(ctx, v553);
                                                // Rule at src/opts/cprop.isle line 82.
                                                returns.extend(Some(v554));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                let v562 = &C::intcc_swap_args(ctx, v211);
                                let v563 = constructor_icmp(ctx, v2.0, v562, v212.1, v212.0);
                                // Rule at src/opts/cprop.isle line 116.
                                returns.extend(Some(v563));
                                if returns.len() >= MAX_ISLE_RETURNS {
                                    return;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v91,
                args: ref v92,
            } => {
                match v91 {
                    &Opcode::Select => {
                        let v93 = C::unpack_value_array_3(ctx, v92);
                        let mut v97 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v93.0, &mut v97);
                        let mut v97 = v97.into_context_iter();
                        while let Some(v98) = v97.next(ctx) {
                            match &v98.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v746,
                                    args: ref v747,
                                    cond: ref v748,
                                } => {
                                    if let &Opcode::Icmp = v746 {
                                        match v748 {
                                            &IntCC::SignedGreaterThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 19.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 33.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 20.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 34.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 23.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 29.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 24.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 30.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 21.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 35.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 22.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 36.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 25.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 31.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 26.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 32.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v103 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v93.1, &mut v103);
                                        let mut v103 = v103.into_context_iter();
                                        while let Some(v104) = v103.next(ctx) {
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v752,
                                                imm: v753,
                                            } = &v104.1
                                            {
                                                if let &Opcode::Iconst = v752 {
                                                    let v754 = C::u64_from_imm64(ctx, v753);
                                                    match v754 {
                                                        0x0 => {
                                                            let mut v755 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v93.2, &mut v755,
                                                            );
                                                            let mut v755 = v755.into_context_iter();
                                                            while let Some(v756) = v755.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v759,
                                                                    imm: v760,
                                                                } = &v756.1 {
                                                                    if let &Opcode::Iconst = v759 {
                                                                        let v761 = C::u64_from_imm64(ctx, v760);
                                                                        if v761 == 0x1 {
                                                                            let v763 = &C::intcc_complement(ctx, v748);
                                                                            let v749 = C::unpack_value_array_2(ctx, v747);
                                                                            let v764 = constructor_icmp(ctx, v98.0, v763, v749.0, v749.1);
                                                                            let v765 = constructor_uextend_from_i8(ctx, v2.0, v764);
                                                                            // Rule at src/opts/selects.isle line 13.
                                                                            returns.extend(Some(v765));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        0x1 => {
                                                            let mut v755 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v93.2, &mut v755,
                                                            );
                                                            let mut v755 = v755.into_context_iter();
                                                            while let Some(v756) = v755.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v759,
                                                                    imm: v760,
                                                                } = &v756.1 {
                                                                    if let &Opcode::Iconst = v759 {
                                                                        let v761 = C::u64_from_imm64(ctx, v760);
                                                                        if v761 == 0x0 {
                                                                            let v762 = constructor_uextend_from_i8(ctx, v2.0, v93.0);
                                                                            // Rule at src/opts/selects.isle line 8.
                                                                            returns.extend(Some(v762));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v101,
                                    arg: v102,
                                } => {
                                    if let &Opcode::Uextend = v101 {
                                        let mut v679 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v102, &mut v679);
                                        let mut v679 = v679.into_context_iter();
                                        while let Some(v680) = v679.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v683,
                                                args: ref v684,
                                                cond: ref v685,
                                            } = &v680.1
                                            {
                                                if let &Opcode::Icmp = v683 {
                                                    let v689 = constructor_select(
                                                        ctx, v2.0, v102, v93.1, v93.2,
                                                    );
                                                    // Rule at src/opts/icmp.isle line 29.
                                                    returns.extend(Some(v689));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                    // Rule at src/opts/icmp.isle line 32.
                                                    returns.extend(Some(v689));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v594,
                                    imm: v595,
                                } => {
                                    if let &Opcode::Iconst = v594 {
                                        let v596 = C::u64_from_imm64(ctx, v595);
                                        if v596 == 0x0 {
                                            // Rule at src/opts/cprop.isle line 172.
                                            returns.extend(Some(v93.2));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v597 = C::u64_is_zero(ctx, v596);
                                        if v597 == false {
                                            // Rule at src/opts/cprop.isle line 169.
                                            returns.extend(Some(v93.1));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v93.1 == v93.2 {
                            // Rule at src/opts/selects.isle line 4.
                            returns.extend(Some(v93.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                        let mut v206 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v93.0, &mut v206);
                        let mut v206 = v206.into_context_iter();
                        while let Some(v207) = v206.next(ctx) {
                            let v208 = constructor_select(ctx, v2.0, v207, v93.1, v93.2);
                            // Rule at src/opts/bitops.isle line 128.
                            returns.extend(Some(v208));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bitselect => {
                        let v770 = C::multi_lane(ctx, v2.0);
                        if let Some(v771) = v770 {
                            let v93 = C::unpack_value_array_3(ctx, v92);
                            let mut v97 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v93.0, &mut v97);
                            let mut v97 = v97.into_context_iter();
                            while let Some(v98) = v97.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v746,
                                    args: ref v747,
                                    cond: ref v748,
                                } = &v98.1
                                {
                                    if let &Opcode::Icmp = v746 {
                                        match v748 {
                                            &IntCC::SignedGreaterThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 39.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 53.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 40.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 54.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 43.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 49.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v768 = constructor_smin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 44.
                                                        returns.extend(Some(v768));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v766 = constructor_smax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 50.
                                                        returns.extend(Some(v766));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 41.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 55.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 42.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 56.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 45.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 51.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v749 = C::unpack_value_array_2(ctx, v747);
                                                if v93.1 == v749.0 {
                                                    if v93.2 == v749.1 {
                                                        let v769 = constructor_umin(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 46.
                                                        returns.extend(Some(v769));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v93.1 == v749.1 {
                                                    if v93.2 == v749.0 {
                                                        let v767 = constructor_umax(
                                                            ctx, v2.0, v749.0, v749.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 52.
                                                        returns.extend(Some(v767));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v93 = C::unpack_value_array_3(ctx, v92);
                        if v93.1 == v93.2 {
                            // Rule at src/opts/selects.isle line 5.
                            returns.extend(Some(v93.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Fma => {
                        let v93 = C::unpack_value_array_3(ctx, v92);
                        let mut v97 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v93.0, &mut v97);
                        let mut v97 = v97.into_context_iter();
                        while let Some(v98) = v97.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v101,
                                arg: v102,
                            } = &v98.1
                            {
                                if let &Opcode::Fneg = v101 {
                                    if v2.0 == v98.0 {
                                        let mut v103 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v93.1, &mut v103);
                                        let mut v103 = v103.into_context_iter();
                                        while let Some(v104) = v103.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v107,
                                                arg: v108,
                                            } = &v104.1
                                            {
                                                if let &Opcode::Fneg = v107 {
                                                    if v2.0 == v104.0 {
                                                        let v109 = constructor_fma(
                                                            ctx, v2.0, v102, v108, v93.2,
                                                        );
                                                        // Rule at src/opts/arithmetic.isle line 108.
                                                        returns.extend(Some(v109));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v26,
                arg: v27,
            } => {
                match v26 {
                    &Opcode::Splat => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v614,
                                    imm: v615,
                                } => {
                                    if let &Opcode::F32const = v614 {
                                        let v616 = C::u32_from_ieee32(ctx, v615);
                                        let v617 = C::u32_as_u64(ctx, v616);
                                        let v618 = constructor_splat32(ctx, v617);
                                        let v619 = constructor_vconst(ctx, v2.0, v618);
                                        // Rule at src/opts/cprop.isle line 188.
                                        returns.extend(Some(v619));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v620,
                                    imm: v621,
                                } => {
                                    if let &Opcode::F64const = v620 {
                                        let v622 = C::u64_from_ieee64(ctx, v621);
                                        let v623 = C::splat64(ctx, v622);
                                        let v624 = constructor_vconst(ctx, v2.0, v623);
                                        // Rule at src/opts/cprop.isle line 190.
                                        returns.extend(Some(v624));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } => {
                                    if let &Opcode::Iconst = v516 {
                                        match v29.0 {
                                            I8 => {
                                                let v599 = C::u64_uextend_imm64(ctx, I8, v517);
                                                let v600 = constructor_splat8(ctx, v599);
                                                let v601 = constructor_vconst(ctx, v2.0, v600);
                                                // Rule at src/opts/cprop.isle line 180.
                                                returns.extend(Some(v601));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I16 => {
                                                let v603 = C::u64_uextend_imm64(ctx, I16, v517);
                                                let v604 = constructor_splat16(ctx, v603);
                                                let v605 = constructor_vconst(ctx, v2.0, v604);
                                                // Rule at src/opts/cprop.isle line 182.
                                                returns.extend(Some(v605));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I32 => {
                                                let v607 = C::u64_uextend_imm64(ctx, I32, v517);
                                                let v608 = constructor_splat32(ctx, v607);
                                                let v609 = constructor_vconst(ctx, v2.0, v608);
                                                // Rule at src/opts/cprop.isle line 184.
                                                returns.extend(Some(v609));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I64 => {
                                                let v611 = C::u64_uextend_imm64(ctx, I64, v517);
                                                let v612 = C::splat64(ctx, v611);
                                                let v613 = constructor_vconst(ctx, v2.0, v612);
                                                // Rule at src/opts/cprop.isle line 186.
                                                returns.extend(Some(v613));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::Binary {
                                    opcode: ref v56,
                                    args: ref v57,
                                } => {
                                    if let &Opcode::Ushr = v56 {
                                        if v2.0 == v29.0 {
                                            let v58 = C::unpack_value_array_2(ctx, v57);
                                            let mut v61 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v58.1, &mut v61);
                                            let mut v61 = v61.into_context_iter();
                                            while let Some(v62) = v61.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v65,
                                                    imm: v66,
                                                } = &v62.1
                                                {
                                                    if let &Opcode::Iconst = v65 {
                                                        let v67 = C::u64_from_imm64(ctx, v66);
                                                        let v197 =
                                                            constructor_ty_shift_mask(ctx, v2.0);
                                                        let v813 = C::u64_eq(ctx, v67, v197);
                                                        if v813 == true {
                                                            if v2.0 == v62.0 {
                                                                let v814 = constructor_sshr(
                                                                    ctx, v2.0, v58.0, v58.1,
                                                                );
                                                                // Rule at src/opts/shifts.isle line 102.
                                                                returns.extend(Some(v814));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v32,
                                    arg: v33,
                                } => {
                                    match v32 {
                                        &Opcode::Splat => {
                                            if v2.0 == v29.0 {
                                                let v831 = C::lane_type(ctx, v2.0);
                                                let v891 = constructor_ineg(ctx, v831, v33);
                                                let v892 = constructor_splat(ctx, v2.0, v891);
                                                // Rule at src/opts/vector.isle line 45.
                                                returns.extend(Some(v892));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v29.0 {
                                                let v34 = C::subsume(ctx, v33);
                                                // Rule at src/opts/arithmetic.isle line 24.
                                                returns.extend(Some(v34));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                match v32 {
                                    &Opcode::Splat => {
                                        if v2.0 == v29.0 {
                                            let v831 = C::lane_type(ctx, v2.0);
                                            let v893 = constructor_iabs(ctx, v831, v33);
                                            let v894 = constructor_splat(ctx, v2.0, v893);
                                            // Rule at src/opts/vector.isle line 48.
                                            returns.extend(Some(v894));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v29.0 {
                                            let v41 = constructor_iabs(ctx, v2.0, v33);
                                            // Rule at src/opts/arithmetic.isle line 31.
                                            returns.extend(Some(v41));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v29.0 {
                                            let v42 = C::subsume(ctx, v27);
                                            // Rule at src/opts/arithmetic.isle line 35.
                                            returns.extend(Some(v42));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::Binary {
                                    opcode: ref v56,
                                    args: ref v57,
                                } => {
                                    match v56 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v29.0 {
                                                let v58 = C::unpack_value_array_2(ctx, v57);
                                                let mut v61 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v58.1, &mut v61);
                                                let mut v61 = v61.into_context_iter();
                                                while let Some(v62) = v61.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v65,
                                                        imm: v66,
                                                    } = &v62.1
                                                    {
                                                        if let &Opcode::Iconst = v65 {
                                                            let v69 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v66,
                                                            );
                                                            if v69 == -0x1 {
                                                                if v2.0 == v62.0 {
                                                                    let v68 = constructor_ineg(
                                                                        ctx, v2.0, v58.0,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 70.
                                                                    returns.extend(Some(v68));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let mut v70 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v58.0, &mut v70);
                                                let mut v70 = v70.into_context_iter();
                                                while let Some(v71) = v70.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v74,
                                                        imm: v75,
                                                    } = &v71.1
                                                    {
                                                        if let &Opcode::Iconst = v74 {
                                                            let v76 = C::i64_sextend_imm64(
                                                                ctx, v2.0, v75,
                                                            );
                                                            if v76 == -0x1 {
                                                                if v2.0 == v71.0 {
                                                                    let v77 = constructor_ineg(
                                                                        ctx, v2.0, v58.1,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 73.
                                                                    returns.extend(Some(v77));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v29.0 {
                                                let v58 = C::unpack_value_array_2(ctx, v57);
                                                let mut v61 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v58.1, &mut v61);
                                                let mut v61 = v61.into_context_iter();
                                                while let Some(v62) = v61.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v65,
                                                        imm: v66,
                                                    } = &v62.1
                                                    {
                                                        if let &Opcode::Iconst = v65 {
                                                            let v67 = C::u64_from_imm64(ctx, v66);
                                                            if v67 == 0x1 {
                                                                if v2.0 == v62.0 {
                                                                    let v68 = constructor_ineg(
                                                                        ctx, v2.0, v58.0,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 68.
                                                                    returns.extend(Some(v68));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v58 = C::unpack_value_array_2(ctx, v57);
                                            let v176 = constructor_bnot(ctx, v2.0, v58.0);
                                            let v177 = constructor_bnot(ctx, v2.0, v58.1);
                                            let v179 = constructor_bor(ctx, v2.0, v176, v177);
                                            // Rule at src/opts/bitops.isle line 60.
                                            returns.extend(Some(v179));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v29.0 {
                                                let v58 = C::unpack_value_array_2(ctx, v57);
                                                let v176 = constructor_bnot(ctx, v2.0, v58.0);
                                                let v177 = constructor_bnot(ctx, v2.0, v58.1);
                                                let v178 = constructor_band(ctx, v2.0, v176, v177);
                                                // Rule at src/opts/bitops.isle line 57.
                                                returns.extend(Some(v178));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v32,
                                    arg: v33,
                                } => {
                                    match v32 {
                                        &Opcode::Splat => {
                                            let v871 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v872) = v871 {
                                                if v2.0 == v29.0 {
                                                    let v831 = C::lane_type(ctx, v2.0);
                                                    let v879 = constructor_bnot(ctx, v831, v33);
                                                    let v880 = constructor_splat(ctx, v2.0, v879);
                                                    // Rule at src/opts/vector.isle line 26.
                                                    returns.extend(Some(v880));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v29.0 {
                                                let v34 = C::subsume(ctx, v33);
                                                // Rule at src/opts/bitops.isle line 53.
                                                returns.extend(Some(v34));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } => {
                                    if let &Opcode::Iconst = v516 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            if v29.0 == v44 {
                                                let v518 = C::u64_from_imm64(ctx, v517);
                                                let v519 = C::u64_not(ctx, v518);
                                                let v520 = C::imm64_masked(ctx, v44, v519);
                                                let v521 = constructor_iconst(ctx, v44, v520);
                                                let v522 = C::subsume(ctx, v521);
                                                // Rule at src/opts/cprop.isle line 53.
                                                returns.extend(Some(v522));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v739 = C::remat(ctx, arg0);
                        // Rule at src/opts/remat.isle line 24.
                        returns.extend(Some(v739));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Bitrev = v32 {
                                    if v2.0 == v29.0 {
                                        let v34 = C::subsume(ctx, v33);
                                        // Rule at src/opts/bitops.isle line 147.
                                        returns.extend(Some(v34));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Bswap = v32 {
                                    if v2.0 == v29.0 {
                                        let v34 = C::subsume(ctx, v33);
                                        // Rule at src/opts/bitops.isle line 144.
                                        returns.extend(Some(v34));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    if v2.0 == v29.0 {
                                        let v831 = C::lane_type(ctx, v2.0);
                                        let v895 = constructor_popcnt(ctx, v831, v33);
                                        let v896 = constructor_splat(ctx, v2.0, v895);
                                        // Rule at src/opts/vector.isle line 51.
                                        returns.extend(Some(v896));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fneg => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Fneg = v32 {
                                    if v2.0 == v29.0 {
                                        let v34 = C::subsume(ctx, v33);
                                        // Rule at src/opts/arithmetic.isle line 104.
                                        returns.extend(Some(v34));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bmask => {
                        let mut v203 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v27, &mut v203);
                        let mut v203 = v203.into_context_iter();
                        while let Some(v204) = v203.next(ctx) {
                            let v205 = constructor_bmask(ctx, v2.0, v204);
                            // Rule at src/opts/bitops.isle line 127.
                            returns.extend(Some(v205));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Ireduce => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::Unary {
                                    opcode: ref v32,
                                    arg: v33,
                                } => {
                                    match v32 {
                                        &Opcode::Bmask => {
                                            let v229 = constructor_bmask(ctx, v2.0, v33);
                                            // Rule at src/opts/bitops.isle line 141.
                                            returns.extend(Some(v229));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v663 = C::value_type(ctx, v33);
                                            if v2.0 == v663 {
                                                // Rule at src/opts/extends.isle line 34.
                                                returns.extend(Some(v33));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v663 = C::value_type(ctx, v33);
                                            if v2.0 == v663 {
                                                // Rule at src/opts/extends.isle line 33.
                                                returns.extend(Some(v33));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } => {
                                    if let &Opcode::Iconst = v516 {
                                        let v532 = C::fits_in_64(ctx, v29.0);
                                        if let Some(v533) = v532 {
                                            let v518 = C::u64_from_imm64(ctx, v517);
                                            let v534 = C::imm64_masked(ctx, v2.0, v518);
                                            let v535 = constructor_iconst(ctx, v2.0, v534);
                                            let v536 = C::subsume(ctx, v535);
                                            // Rule at src/opts/cprop.isle line 73.
                                            returns.extend(Some(v536));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v915 = constructor_sextend(ctx, v831, v33);
                                    let v916 = constructor_splat(ctx, v2.0, v915);
                                    // Rule at src/opts/vector.isle line 85.
                                    returns.extend(Some(v916));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v915 = constructor_sextend(ctx, v831, v33);
                                    let v916 = constructor_splat(ctx, v2.0, v915);
                                    // Rule at src/opts/vector.isle line 84.
                                    returns.extend(Some(v916));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v917 = constructor_uextend(ctx, v831, v33);
                                    let v918 = constructor_splat(ctx, v2.0, v917);
                                    // Rule at src/opts/vector.isle line 88.
                                    returns.extend(Some(v918));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v917 = constructor_uextend(ctx, v831, v33);
                                    let v918 = constructor_splat(ctx, v2.0, v917);
                                    // Rule at src/opts/vector.isle line 87.
                                    returns.extend(Some(v918));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::Unary {
                                    opcode: ref v32,
                                    arg: v33,
                                } => {
                                    if let &Opcode::Uextend = v32 {
                                        let v648 = constructor_uextend(ctx, v2.0, v33);
                                        // Rule at src/opts/extends.isle line 2.
                                        returns.extend(Some(v648));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } => {
                                    if let &Opcode::Iconst = v516 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            let v537 = C::u64_uextend_imm64(ctx, v29.0, v517);
                                            let v538 = C::imm64(ctx, v537);
                                            let v539 = constructor_iconst(ctx, v44, v538);
                                            let v540 = C::subsume(ctx, v539);
                                            // Rule at src/opts/cprop.isle line 76.
                                            returns.extend(Some(v540));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            match &v29.1 {
                                &InstructionData::Unary {
                                    opcode: ref v32,
                                    arg: v33,
                                } => {
                                    match v32 {
                                        &Opcode::Bmask => {
                                            let v229 = constructor_bmask(ctx, v2.0, v33);
                                            // Rule at src/opts/bitops.isle line 140.
                                            returns.extend(Some(v229));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v649 = constructor_sextend(ctx, v2.0, v33);
                                            // Rule at src/opts/extends.isle line 4.
                                            returns.extend(Some(v649));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v516,
                                    imm: v517,
                                } => {
                                    if let &Opcode::Iconst = v516 {
                                        let v43 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v44) = v43 {
                                            let v541 = C::i64_sextend_imm64(ctx, v29.0, v517);
                                            let v542 = C::i64_as_u64(ctx, v541);
                                            let v543 = C::imm64_masked(ctx, v44, v542);
                                            let v544 = constructor_iconst(ctx, v44, v543);
                                            let v545 = C::subsume(ctx, v544);
                                            // Rule at src/opts/cprop.isle line 79.
                                            returns.extend(Some(v545));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v867 = constructor_fcvt_from_uint(ctx, v831, v33);
                                    let v868 = constructor_splat(ctx, v2.0, v867);
                                    // Rule at src/opts/vector.isle line 6.
                                    returns.extend(Some(v868));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let mut v28 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v27, &mut v28);
                        let mut v28 = v28.into_context_iter();
                        while let Some(v29) = v28.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v32,
                                arg: v33,
                            } = &v29.1
                            {
                                if let &Opcode::Splat = v32 {
                                    let v831 = C::lane_type(ctx, v2.0);
                                    let v869 = constructor_fcvt_from_sint(ctx, v831, v33);
                                    let v870 = constructor_splat(ctx, v2.0, v869);
                                    // Rule at src/opts/vector.isle line 8.
                                    returns.extend(Some(v870));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v742,
                imm: v743,
            } => {
                if let &Opcode::F32const = v742 {
                    let v739 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 28.
                    returns.extend(Some(v739));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v744,
                imm: v745,
            } => {
                if let &Opcode::F64const = v744 {
                    let v739 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 30.
                    returns.extend(Some(v739));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v740,
                imm: v741,
            } => {
                if let &Opcode::Iconst = v740 {
                    let v739 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 26.
                    returns.extend(Some(v739));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term iconst_u64.
pub fn constructor_iconst_u64<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Value {
    if arg0 == I128 {
        let v10 = C::imm64_masked(ctx, I64, arg1);
        let v11 = constructor_iconst(ctx, I64, v10);
        let v12 = constructor_uextend(ctx, I128, v11);
        // Rule at src/prelude_opt.isle line 57.
        return v12;
    }
    let v1 = C::ty_int_ref_scalar_64_extract(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_umax(ctx, v2);
        let v5 = C::u64_le(ctx, arg1, v4);
        if v5 == true {
            let v6 = C::imm64_masked(ctx, v2, arg1);
            let v7 = constructor_iconst(ctx, v2, v6);
            // Rule at src/prelude_opt.isle line 52.
            return v7;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_u64", "src/prelude_opt.isle line 49"
    )
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 119.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 120.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let mut v39 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v36.1, &mut v39);
                        let mut v39 = v39.into_context_iter();
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1
                            {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0 {
                                        // Rule at src/opts/bitops.isle line 123.
                                        returns.extend(Some(v36.0));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let mut v18 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v14.1, &mut v18);
                    let mut v18 = v18.into_context_iter();
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1
                        {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let mut v26 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v14.2, &mut v26);
                                    let mut v26 = v26.into_context_iter();
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1
                                        {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0 {
                                                    // Rule at src/opts/bitops.isle line 121.
                                                    returns.extend(Some(v14.0));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src/opts/bitops.isle line 115.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/opts/bitops.isle line 117.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bswap => {
                        // Rule at src/opts/bitops.isle line 116.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Popcnt => {
                        // Rule at src/opts/bitops.isle line 118.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bmask => {
                        // Rule at src/opts/bitops.isle line 114.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Uextend => {
                        // Rule at src/opts/bitops.isle line 113.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Sextend => {
                        // Rule at src/opts/bitops.isle line 112.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src/opts/cprop.isle line 194.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src/opts/cprop.isle line 196.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src/opts/cprop.isle line 198.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2, v4);
        // Rule at src/opts/icmp.isle line 159.
        return Some(v7);
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 164.
            return 0x1;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 173.
            return 0x6;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 170.
            return 0x4;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 172.
            return 0x5;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 166.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 168.
            return 0x3;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 169.
            return 0x4;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 171.
            return 0x5;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 165.
            return 0x2;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 167.
            return 0x3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "decompose_intcc", "src/opts/icmp.isle line 163"
    )
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0 => {
            let v6 = C::imm64(ctx, 0x0);
            let v7 = constructor_iconst(ctx, arg0, v6);
            let v8 = C::subsume(ctx, v7);
            // Rule at src/opts/icmp.isle line 176.
            return v8;
        }
        0x1 => {
            let v10 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src/opts/icmp.isle line 177.
            return v10;
        }
        0x2 => {
            match arg2 {
                true => {
                    let v14 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 179.
                    return v14;
                }
                false => {
                    let v12 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 178.
                    return v12;
                }
                _ => {}
            }
        }
        0x3 => {
            match arg2 {
                true => {
                    let v18 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 181.
                    return v18;
                }
                false => {
                    let v16 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 180.
                    return v16;
                }
                _ => {}
            }
        }
        0x4 => {
            match arg2 {
                true => {
                    let v22 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 183.
                    return v22;
                }
                false => {
                    let v20 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 182.
                    return v20;
                }
                _ => {}
            }
        }
        0x5 => {
            match arg2 {
                true => {
                    let v26 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 185.
                    return v26;
                }
                false => {
                    let v24 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 184.
                    return v24;
                }
                _ => {}
            }
        }
        0x6 => {
            let v28 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src/opts/icmp.isle line 186.
            return v28;
        }
        0x7 => {
            let v30 = C::imm64(ctx, 0x1);
            let v31 = constructor_iconst(ctx, arg0, v30);
            let v32 = C::subsume(ctx, v31);
            // Rule at src/opts/icmp.isle line 187.
            return v32;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "compose_icmp", "src/opts/icmp.isle line 175"
    )
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 198.
            return 0x3;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 199.
            return 0x3;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 196.
            return 0x2;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 197.
            return 0x2;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 194.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 195.
            return 0x2;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 192.
            return 0x1;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 193.
            return 0x1;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 190.
            return 0x1;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 191.
            return 0x1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "intcc_class", "src/opts/icmp.isle line 189"
    )
}

// Generated as internal constructor for term uextend_from_i8.
pub fn constructor_uextend_from_i8<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    if arg0 == I8 {
        // Rule at src/opts/selects.isle line 76.
        return arg1;
    }
    let v2 = constructor_uextend(ctx, arg0, arg1);
    // Rule at src/opts/selects.isle line 75.
    return v2;
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(ctx: &mut C, arg0: u64) -> Option<Type> {
    match arg0 {
        0x8 => {
            // Rule at src/opts/shifts.isle line 97.
            return Some(I8);
        }
        0x10 => {
            // Rule at src/opts/shifts.isle line 98.
            return Some(I16);
        }
        0x20 => {
            // Rule at src/opts/shifts.isle line 99.
            return Some(I32);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 218.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 215.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 213.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iadd_uextend", "src/opts/shifts.isle line 212"
    )
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 230.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 227.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 225.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "isub_uextend", "src/opts/shifts.isle line 224"
    )
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: FuncRef) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 362.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 371.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 380.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 389.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 398.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 407.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 416.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 425.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 434.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 443.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 452.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 461.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 470.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 479.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 488.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 497.
    return v6;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 506.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 515.
    return v6;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 524.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 533.
    return v6;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 542.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 551.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 560.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 569.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 578.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 587.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 596.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 605.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 614.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 623.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 632.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 641.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 650.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 659.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 668.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 677.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 686.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 695.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 704.
    return v3;
}

// Generated as internal constructor for term table_addr.
pub fn constructor_table_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Table,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::TableAddr {
        opcode: Opcode::TableAddr,
        arg: arg2,
        table: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 713.
    return v6;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Imm64) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 722.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee32) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 731.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee64) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 740.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Constant) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 749.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 758.
    return v7;
}

// Generated as internal constructor for term null.
pub fn constructor_null<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::Null,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 767.
    return v3;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 776.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 785.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 794.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 803.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 812.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 821.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 830.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 839.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 848.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 857.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 866.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 875.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 884.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 893.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 902.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 911.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 920.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 929.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 938.
    return v6;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 947.
    return v6;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 956.
    return v6;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 965.
    return v6;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 974.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 983.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 992.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1001.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1010.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1019.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1028.
    return v5;
}

// Generated as internal constructor for term iadd_cin.
pub fn constructor_iadd_cin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IaddCin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1037.
    return v7;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &TrapCode,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v5.clone(),
        code: arg3.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1046.
    return v7;
}

// Generated as internal constructor for term isub_bin.
pub fn constructor_isub_bin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IsubBin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1055.
    return v7;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1064.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1073.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1082.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1091.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1100.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1109.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1118.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1127.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Imm64) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1136.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1145.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1163.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1172.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1181.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1190.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1199.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1208.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1217.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1226.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1235.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1244.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1253.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1262.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1271.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1280.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1289.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1298.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1307.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1316.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1325.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1334.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1343.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1352.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1361.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1370.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1379.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1388.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1397.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1406.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1415.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1424.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1433.
    return v4;
}

// Generated as internal constructor for term is_null.
pub fn constructor_is_null<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsNull,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1442.
    return v4;
}

// Generated as internal constructor for term is_invalid.
pub fn constructor_is_invalid<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsInvalid,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1451.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1460.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1469.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1478.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1487.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1496.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1505.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1514.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1523.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1532.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1541.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1550.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1559.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1568.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1577.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1586.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1595.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1604.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1613.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1622.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1631.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1640.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1649.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1658.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1667.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1676.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1685.
    return v4;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1694.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: &AtomicRmwOp,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_2_ctor(ctx, arg3, arg4);
    let v7 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v6.clone(),
        flags: arg1,
        op: arg2.clone(),
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1703.
    return v8;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_3_ctor(ctx, arg2, arg3, arg4);
    let v7 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v6.clone(),
        flags: arg1,
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1712.
    return v8;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1721.
    return v5;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /workspace/desktop/apps/desktop/src-tauri/target/debug/build/cranelift-codegen-189affede36f14f7/out/clif_opt.isle line 1730.
    return v5;
}
