name: Tauri Unified Release

permissions:
  contents: write

on:
  workflow_run:
    workflows: ['Pipeline']
    branches: [main]
    types: [completed]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean
      skip_pipeline_check:
        description: 'Skip pipeline dependency check (for manual releases)'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build from'
        required: false
        type: string
        default: ${{ github.ref }}

env:
  CARGO_TERM_COLOR: always

jobs:
  check-pipeline:
    name: Check Pipeline Status
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' }}
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    steps:
      - name: Check if pipeline succeeded
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          fi

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    if: ${{ github.event_name == 'workflow_call' || github.event_name != 'workflow_run' || needs.check-pipeline.outputs.should_proceed == 'true' || github.event.inputs.skip_pipeline_check == 'true' }}
    needs: check-pipeline
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/release/bundle/macos/*.app
            src-tauri/target/release/bundle/dmg/*.dmg

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: ${{ github.event_name == 'workflow_call' || github.event_name != 'workflow_run' || needs.check-pipeline.outputs.should_proceed == 'true' || github.event.inputs.skip_pipeline_check == 'true' }}
    needs: check-pipeline
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_call' || github.event_name != 'workflow_run' || needs.check-pipeline.outputs.should_proceed == 'true' || github.event.inputs.skip_pipeline_check == 'true' }}
    needs: check-pipeline
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm

  create-release:
    name: Create Release
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits since last tag
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          fi

          # Categorize commits
          FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature\|add" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug\|issue" || echo "")
          BREAKING=$(echo "$CHANGELOG" | grep -i "breaking\|major" || echo "")
          OTHER=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|breaking\|major" || echo "")

          # Build release notes
          RELEASE_NOTES="## What's Changed\n\n"

          if [ ! -z "$BREAKING" ]; then
            RELEASE_NOTES+="### ‚ö†Ô∏è Breaking Changes\n$BREAKING\n\n"
          fi

          if [ ! -z "$FEATURES" ]; then
            RELEASE_NOTES+="### ‚ú® New Features\n$FEATURES\n\n"
          fi

          if [ ! -z "$FIXES" ]; then
            RELEASE_NOTES+="### üêõ Bug Fixes\n$FIXES\n\n"
          fi

          if [ ! -z "$OTHER" ]; then
            RELEASE_NOTES+="### üìù Other Changes\n$OTHER\n\n"
          fi

          RELEASE_NOTES+="## Build Info\n"
          RELEASE_NOTES+="- **Version:** ${{ steps.version.outputs.version }}\n"
          RELEASE_NOTES+="- **Commit:** ${{ github.sha }}\n"
          RELEASE_NOTES+="- **Branch:** ${{ github.ref_name }}\n"
          RELEASE_NOTES+="- **Build Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            artifacts/macos-build/*.app
            artifacts/macos-build/*.dmg
            artifacts/windows-build/*.msi
            artifacts/windows-build/*.exe
            artifacts/linux-build/*.AppImage
            artifacts/linux-build/*.deb
            artifacts/linux-build/*.rpm
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          generate_release_notes: false

      - name: Update version in package.json
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update package.json version
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          # Update Cargo.toml version
          sed -i "s/^version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" src-tauri/Cargo.toml

          # Update tauri.conf.json version
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.version.outputs.version }}\"/" src-tauri/tauri.conf.json

      - name: Commit version updates
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push
